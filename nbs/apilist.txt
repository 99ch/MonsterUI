# monsterui Module Documentation

## monsterui.core

- `class Theme`
    Selector to choose theme and get all headers needed for app.  Includes frankenui + tailwind

    - `def headers(self, mode)`
        Create frankenui and tailwind cdns

    - `def local_headers(self, mode, static_dir)`
        Create headers using local files downloaded from CDNs

    - `@property def name(self)`

- `class TextT`
    Text Styles from https://franken-ui.dev/docs/text

    - `@property def name(self)`

- `class TextFont`
    Combinations of TextT that are particularly useful

    - `def __add__(self, other)`
    - `def __radd__(self, other)`
    - `def __str__(self)`
    - `@property def name(self)`

- `def PParagraph(*args, **kwargs)`
    P Tag with uk-paragraph style applied

- `def PLarge(*args, **kwargs)`
    P Tag with uk-text-large style applied

- `def PLead(*args, **kwargs)`
    P Tag with uk-text-lead style applied

- `def PSmall(*args, **kwargs)`
    P Tag with uk-text-small style applied

- `def PMuted(*args, **kwargs)`
    P Tag with uk-text-muted style applied

- `def CodeSpan(*args, **kwargs)`
    A CodeSpan with Styling

- `def Blockquote(*c, **kwargs)`
    A Blockquote with Styling

- `def H1(*c, **kwargs)`
    A H1 with Styling

- `def H2(*c, **kwargs)`
    A H2 with Styling

- `def H3(*c, **kwargs)`
    A H3 with Styling

- `def H4(*c, **kwargs)`
    A H4 with Styling

- `class ButtonT`
    Options for styling Buttons

    - `@property def name(self)`

- `def Button(*c, **kwargs)`
    A Button with Styling (defaults to `type=submit` for form submission)

- `class ContainerT`
    Max width container sizes from https://franken-ui.dev/docs/container

    - `@property def name(self)`

- `def Container(*c, **kwargs)`
    A Div to be used as a container that often wraps large sections or a page of content

- `def Titled(title, *args, **kwargs)`
    Creates a standard page structure for titled page.  Main(Container(title, content))

- `class DividerT`
    Divider Styles from https://franken-ui.dev/docs/divider

    - `@property def name(self)`

- `def Divider(*args, **kwargs)`
    Divider with default styling and margin

- `def DividerSplit(*c)`
    Creates a simple horizontal line divider with configurable thickness and vertical spacing

- `def Alert(*args, **kwargs)`
    A styled alert component that can contain a AlertTitle, AlertDescription and AlertCloseButton

- `def AlertCloseButton(*args, **kwargs)`
    A button component for closing an Alert

- `def AlertTitle(*args, **kwargs)`
    A title component for use within an Alert

- `def AlertDescription(*args, **kwargs)`
    A description component for use within an Alert

- `def Article(*c, **kwargs)`
    A styled article container for blog posts or similar content

- `def ArticleTitle(*c, **kwargs)`
    A title component for use within an Article

- `def ArticleMeta(*c, **kwargs)`
    A metadata component for use within an Article showing things like date, author etc

- `class SectionT`
    Section styles from https://franken-ui.dev/docs/section

    - `@property def name(self)`

- `class LabelT`
    - `@property def name(self)`

- `def Label(*c, **kwargs)`
    FrankenUI labels, which look like pills

- `def GenericLabelInput(label, lbl_cls, input_cls, container, cls, id, input_fn, **kwargs)`
    `Div(Label,Input)` component with Uk styling injected appropriately. Generally you should higher level API, such as `UkTextArea` which is created for you in this library

- `@delegates(GenericLabelInput, but=['input_fn', 'cls']) def LabelInput(*args, **kwargs)`
    A Label and Input pair that provides default spacing and links/names them based on id

- `def LabelRadio(label, lbl_cls, input_cls, container, cls, id, **kwargs)`
    A Label and Radio pair that provides default spacing and links/names them based on id

- `def LabelCheckboxX(label, lbl_cls, input_cls, container, cls, **kwargs)`
    `Div(Label,Input)` component with Uk styling injected appropriately. Generally you should higher level API, such as `UkTextArea` which is created for you in this library

- `@delegates(GenericLabelInput, but=['input_fn', 'cls']) def LabelTextArea(*args, **kwargs)`
    Creates a labeled textarea with optional initial value

- `def LabelSelect(*option, **kwargs)`
    `Div(Label,Input)` component with Uk styling injected appropriately. Generally you should higher level API, such as `UkTextArea` which is created for you in this library

- `def Options(*c)`
    Helper function to wrap things into `Option`s for use in `UkSelect`

- `def UkSelect(*option, **kwargs)`
    Creates a select dropdown with uk styling

- `def LabelUkSelect(*option, **kwargs)`
    Creates a select dropdown with uk styling

- `class AT`
    Link styles from https://franken-ui.dev/docs/link

    - `@property def name(self)`

- `class ListT`
    List styles from https://franken-ui.dev/docs/list

    - `@property def name(self)`

- `def HTMXModalCloseButton(*c, **kwargs)`
    Creates a button that closes a modal using HTMX

- `def Modal(*c, **kwargs)`
    Create a Modal using the appropriate Modal* classes to put the boilerplate in the appropriate places for you

- `class PaddingT`
    Padding Modifiers from https://franken-ui.dev/docs/padding

    - `@property def name(self)`

- `class PositionT`
    Position modifiers from https://franken-ui.dev/docs/position

    - `@property def name(self)`

- `class FlexT`
    Flexbox modifiers from UIkit

    - `@property def name(self)`

- `def Grid(*div, **kwargs)`
    Creates a responsive grid layout with smart defaults based on content

- `def DivFullySpaced(*c, **kwargs)`
    Creates a flex div with it's components having as much space between them as possible

- `def DivCentered(*c, **kwargs)`
    Creates a flex div with it's components centered in it

- `def DivLAligned(*c, **kwargs)`
    Creates a flex div with it's components aligned to the left

- `def DivRAligned(*c, **kwargs)`
    Creates a flex div with it's components aligned to the right

- `class NavT`
    - `@property def name(self)`

- `class CardT`
    Card styles from UIkit

    - `@property def name(self)`

- `class TableT`
    - `@property def name(self)`

## monsterui.foundations

> Data Structures and Utilties

- `def stringify(o)`
    Converts input types into strings that can be passed to FT components

- `class VEnum`
    - `def __str__(self)`
    - `def __add__(self, other)`
    - `def __radd__(self, other)`
    - `@property def name(self)`

