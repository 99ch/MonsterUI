# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_components.ipynb.

# %% auto 0
__all__ = ['VEnum', 'stringify', 'Theme', 'UkInput', 'UkButtonT', 'UkButton', 'UkHSplit', 'UkDropdownButton', 'Card']

# %% ../nbs/01_components.ipynb 2
# from fh_frankenui.foundations import *
from fasthtml.common import *
from enum import Enum, EnumType

# %% ../nbs/01_components.ipynb 9
class VEnum(Enum):
    def __add__(self, other):
        return self.__str__() + other.__str__()
    
    def __str__(self):
        base = self.__class__.__name__       
        if isinstance(self.__class__, EnumType):
            base = base.lstrip('Uk').rstrip('T')
        return f"uk-{base.lower()}-{self.value}".strip('-')

# %% ../nbs/01_components.ipynb 12
def stringify(o):
    # need a better name, stringify might be too general for what it does 
    if is_listy(o): return ' '.join(map(str,o)) if o else ""
    return o.__str__()

# %% ../nbs/01_components.ipynb 15
class Theme(Enum):
    slate = "slate"
    stone = "stone"
    gray = "gray"
    neutral = "neutral"
    red = "red"
    rose = "rose"
    orange = "orange"
    green = "green"
    blue = "blue"
    yellow = "yellow"
    violet = "violet"
    zinc = "zinc"

    def headers(self):
        js = (Script(src="https://cdn.jsdelivr.net/npm/uikit@3.21.6/dist/js/uikit.min.js"),
              Script(src="https://cdn.jsdelivr.net/npm/uikit@3.21.6/dist/js/uikit-icons.min.js"))
        _url = "https,//unpkg.com/franken-wc@0.0.6/dist/css/{theme}.min.css"
        return (*js, Link(rel="stylesheet", href=_url.format(theme=self.value)))


# %% ../nbs/01_components.ipynb 20
def UkInput(label=(), 
            lbl_cls=(),
            inp_cls=(),
            cls=('space-y-2',), # Div cls
            id="", **kwargs):
    lbl_cls, inp_cls, cls = map(stringify,(lbl_cls, inp_cls, cls))
    if label: 
        label = Label(cls='uk-form-label '+lbl_cls)(label)
        if id: label.fr = id
    res = Input(cls='uk-input '+inp_cls, **kwargs)
    if id: res.id = id
    return Div(cls=cls)(label, res)

# %% ../nbs/01_components.ipynb 22
class UkButtonT(VEnum):
    default = 'default'
    primary = 'primary'
    secondary = 'secondary'
    danger = 'danger'
    ghost = 'ghost'
    text = 'text'
    link = 'link'

# %% ../nbs/01_components.ipynb 23
def UkButton(*c, 
            cls=(), # Use UkButtonT or styles 
            **kwargs):    
    return Button(cls='uk-button ' + stringify(cls), **kwargs)(*c)

# %% ../nbs/01_components.ipynb 26
def UkHSplit(*c, cls=(), line_cls=(), text_cls=()):
    cls, line_cls, text_cls = map(stringify,(cls, line_cls, text_cls))
    return Div(cls='relative ' + cls)(
        Div(cls="absolute inset-0 flex items-center " + line_cls)(Span(cls="w-full border-t border-border")),
        Div(cls="relative flex justify-center " + text_cls)(Span(cls="bg-background px-2 ")(*c)))



# %% ../nbs/01_components.ipynb 29
def UkDropdownButton(label, # Shown on the button
                     options, # list of tuples that contain what you want listed
                     btn_cls=('uk-button-default',), # Button class
                     cls=() # parent div class
                     ):
        btn_cls, cls = map(stringify,(btn_cls, cls))
        btn = Button(type='button', cls='uk-button ' + btn_cls)(label, Span(uk_icon='icon: triangle-down'))
        dd_opts = [Li(A(href="#demo", cls='uk-drop-close',uk_toggle="", role="button")(Div(o))) for o in options]
        dd = Div(uk_drop='mode: click; pos: bottom-right', cls='uk-dropdown uk-drop')(Ul(cls='uk-dropdown-nav')(*([Li(cls='uk-nav-divider')] + dd_opts)))
        return Div(cls=cls)(Div(cls='flex items-center space-x-4')(btn, dd))

# %% ../nbs/01_components.ipynb 31
def Card(*c, # Components that go in the body
        header=None, # Components that go in the header
        footer=None,  # Components that go in the footer
        body_cls=(), # classes for the body
        header_cls=(), # classes for the header
        footer_cls=(), # classes for the footer
        cls=(), #class for outermost component
        **kwargs # classes that for the card itself
        ):
    header_cls, footer_cls, body_cls, cls = map(stringify, (header_cls, footer_cls, body_cls, cls))
    res = []
    if header: res += [Div(cls='uk-card-header ' + header_cls)(header),]
    res += [Div(cls='uk-card-body ' + body_cls)(*c),]
    if footer: res += [Div(cls='uk-card-footer ' + footer_cls)(footer),]
    return Div(cls='uk-card '+cls, **kwargs)(*res)
