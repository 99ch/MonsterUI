"""Reference to all FrankenUI Components"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../API Reference.ipynb.

# %% auto 0
__all__ = ['docs_button', 'docs_heading', 'docs_headers', 'docs_textstyle', 'docs_articles_containers_sections', 'docs_cards',
           'docs_lists', 'enum_to_html_table', 'render_content', 'create_doc_section', 'string2code_string',
           'extract_function_body', 'fn2code_string', 'ex_buttons', 'ex_headings', 'ex_textfont', 'ex_textt',
           'ex_articles', 'ex_containers', 'ex_card', 'Tags', 'ex_card2', 'ex_lists']

# %% ../API Reference.ipynb
from fasthtml.common import *

from fh_frankenui.core import *
from nbdev.showdoc import *
import inspect

from enum import EnumType
from collections.abc import Callable

# %% ../API Reference.ipynb
def enum_to_html_table(enum_class):
    headers = ["Option", "Value"]
    rows = [[name, value.value] for name, value in enum_class.__members__.items()]
    return Div(
        Hr(cls='uk-divider-icon my-4'),
        H3(enum_class.__name__,cls='my-4'),
        P(I(enum_class.__doc__)),
        TableFromLists(headers, rows, cls=(TableT.hover, 'uk-table-small')),)

# %% ../API Reference.ipynb
from uuid import uuid4
def render_content(c):
    if isinstance(c, str):        return render_md(c)
    elif isinstance(c, EnumType): return enum_to_html_table(c)
    elif isinstance(c, FT):       return c
    elif isinstance(c, tuple):    
        _id = 'f'+str(uuid4())
        return Card(
            Button(FullySpacedDiv("See Source",UkIcon('corner-down-right', 20, 20, 3)), uk_toggle=f"target: #{_id}", id=_id, cls=ButtonT.primary),
            Button(FullySpacedDiv("See Output",UkIcon('corner-down-right', 20, 20, 3)), uk_toggle=f"target: #{_id}", id=_id, cls=ButtonT.primary, hidden=True),
            Div(c[0], id=_id),
            Div(Pre(Code(c[1])), id=_id, hidden=True, cls="mockup-code"),
            cls='my-8')
    elif isinstance(c, Callable): 
        _html = show_doc(c, renderer=BasicHtmlRenderer)._repr_html_()
        return NotStr(apply_classes(_html, class_map_mods={"table":'uk-table uk-table-hover uk-table-small'}))
    else: return c    

# %% ../API Reference.ipynb
def create_doc_section(*content, title, md_content=None):
    return lambda: Section(H1(title,cls='mb-10'), *map(render_content, content))

# %% ../API Reference.ipynb
def string2code_string(code: str) -> tuple: return eval(code), code

def extract_function_body(func):
    source = inspect.getsource(func)
    body_start = source.index(':') + 1
    body = source[body_start:]
    return body.replace('return ', '', 1)

def fn2code_string(fn: Callable) -> tuple: return fn(), extract_function_body(fn)

# %% ../API Reference.ipynb
def ex_buttons(): 
    return Div(
        Button("Default",   cls=ButtonT.default),
        Button("Primary",   cls=ButtonT.primary),
        Button("Secondary", cls=ButtonT.secondary),
        Button("Danger",    cls=ButtonT.danger),
        Button("Text",      cls=ButtonT.text),
        Button("Link",      cls=ButtonT.link),
        Button("Ghost",     cls=ButtonT.ghost),
        )

# %% ../API Reference.ipynb
docs_button = create_doc_section(Button, 
                       ButtonT, 
                       fn2code_string(ex_buttons),
                       title="Buttons")

# %% ../API Reference.ipynb
def ex_headings():
    return Div(
        H1("Level 1 Heading (H1)"), 
        H2("Level 2 Heading (H2)"), 
        H3("Level 3 Heading (H3)"), 
        H4("Level 4 Heading (H4)")
        )

# %% ../API Reference.ipynb
docs_heading = create_doc_section(
                       fn2code_string(ex_headings),
                        H1, H2, H3, H4, 
                        title="Headings")

# %% ../API Reference.ipynb
docs_headers = create_doc_section( 
                       "To get headers with a default theme use `hdrs=Theme.<color>.headers()`.  For example for the blue theme you would use `hdrs=Theme.blue.headers().  Theme options are:",
                        "> Note: Tailwind is included in the headers for convenience",
                        Theme,
                       title="Headers")

# %% ../API Reference.ipynb
def ex_textfont():
    return Div(
    P('muted_sm', cls=TextFont.muted_sm),
    P('muted_lg', cls=TextFont.muted_lg), 
    P('bold_sm', cls=TextFont.bold_sm),
    )

# %% ../API Reference.ipynb
def ex_textt():
    return Grid(
        P('lead',           cls=TextT.lead),
        P('meta',           cls=TextT.meta),
        P('italic',         cls=TextT.italic),
        P('small',          cls=TextT.small),
        P('default',        cls=TextT.default),
        P('large',          cls=TextT.large),
        P('light',          cls=TextT.light),
        P('normal',         cls=TextT.normal),
        P('bold',           cls=TextT.bold),
        P('lighter',        cls=TextT.lighter),
        P('bolder',         cls=TextT.bolder),
        P('capitalize',     cls=TextT.capitalize),
        P('uppercase',      cls=TextT.uppercase),
        P('lowercase',      cls=TextT.lowercase),
        P('decoration_none',cls=TextT.decoration_none),
        P('muted',          cls=TextT.muted),
        P('primary',        cls=TextT.primary),
        P('secondary',      cls=TextT.secondary),
        P('success',        cls=TextT.success),
        P('warning',        cls=TextT.warning),
        P('danger',         cls=TextT.danger),
        P('left',           cls=TextT.left),
        P('right',          cls=TextT.right),
        P('center',         cls=TextT.center),
        P('justify',        cls=TextT.justify),
        P('top',            cls=TextT.top),
        P('middle',         cls=TextT.middle),
        P('bottom',         cls=TextT.bottom),
        P('baseline',       cls=TextT.baseline),
        P('truncate',       cls=TextT.truncate),
        P('break_',         cls=TextT.break_),
        P('nowrap',         cls=TextT.nowrap),
        )

# %% ../API Reference.ipynb
docs_textstyle = create_doc_section( 
   "Styling text is possibly the most common style thing to do, so we have a couple of helpers for discoverability inside python.  `TextFont` is intended to be combinations are are widely applicable and used often, where `TextT` is intended to be more flexible options for you to combine together yourself.",
    TextFont,
    fn2code_string(ex_textfont),
    TextT,
    fn2code_string(ex_textt),
    title="Text Style")

# %% ../API Reference.ipynb
def ex_articles():
    return Article(
        ArticleTitle("Sample Article Title"), 
        ArticleMeta("By: John Doe"),
        P('lorem ipsum dolor sit amet consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'))

# %% ../API Reference.ipynb
def ex_containers():
    return Container(
        "This is a sample container with custom styling.",
        cls=ContainerT.xsmall,
        style="background-color: #FFA500; color: #000000")

# %% ../API Reference.ipynb
docs_articles_containers_sections = create_doc_section(
    ArticleMeta,
    ArticleTitle,
    Article,
    fn2code_string(ex_articles),
    Container,
    ContainerT,
    fn2code_string(ex_containers),
    Section,
    SectionT,
    title="Articles, Containers & Sections"
)

# %% ../API Reference.ipynb
def ex_card():
    return Card(
        Form(LabelInput("Input"),
             LabelRange("Range")),
        header=Div(
            CardTitle("Header"),
            P("A card with header and footer",cls=TextFont.muted_sm)),
        footer=LAlignedDiv(Button("Footer Submit Button")))

# %% ../API Reference.ipynb
def Tags(cats): return Div(cls='space-x-2')(map(Label, cats))

def ex_card2():
    return Card(
        LAlignedDiv(
            A(Img(src="https://isaac-flath.github.io/website/posts/_TopicImages/FastHtml.jpg", style="width:200px"),href="#"),
            Div(cls='space-y-3 uk-width-expand')(
                H4("Creating Custom FastHTML Tags for Markdown Rendering"),
                P("A step by step tutorial to rendering markdown in FastHTML using zero-md inside of DaisyUI chat bubbles"),
                FullySpacedDiv(map(Span, ["Isaac Flath", "20-October-2024"]), cls=TextFont.muted_sm),
                FullySpacedDiv(
                    Tags(["FastHTML", "HTMX", "Web Apps"]),
                    Button("Read", cls=(ButtonT.primary,'h-6'))))))

# %% ../API Reference.ipynb
docs_cards = create_doc_section(
    Card,
    H3("Example Usage"),
    fn2code_string(ex_card),
    fn2code_string(ex_card2),
    CardTitle,
    CardT,
    "The remainder of these are only needed if you're doing something really special.  They are used in the `Card` function to generate the boilerplate for you.",
    CardContainer,
    CardHeader,
    CardBody,
    CardFooter,
    title="Cards"
)

# %% ../API Reference.ipynb
def ex_lists():
    list_options = [(style,str(cls)) for style,cls in ListT.__members__.items()]
    lists = [Div(H4(f"{style} List:"), List(Li("Item 1"), Li("Item 2"), cls=cls)) for style, cls in list_options]
    return Grid(*lists)

# %% ../API Reference.ipynb
docs_lists = create_doc_section(
    List,
    fn2code_string(ex_lists),
    ListT,
    title="Lists")
