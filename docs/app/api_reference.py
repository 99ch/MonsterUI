"""Reference to all FrankenUI Components"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../API Reference.ipynb.

# %% auto 0
__all__ = ['docs_button_link', 'docs_heading', 'docs_headers', 'docs_text', 'docs_containers', 'docs_cards', 'docs_lists',
           'docs_markdown', 'docs_forms', 'enum_to_html_table', 'render_content', 'create_doc_section',
           'string2code_string', 'extract_function_body', 'fn2code_string', 'ex_buttons', 'ex_links', 'ex_headings',
           'ex_textfont', 'ex_textt', 'ex_articles', 'ex_containers', 'ex_card', 'Tags', 'ex_card2', 'ex_lists',
           'ex_md', 'ex_applyclasses', 'ex_formlabel', 'ex_input', 'ex_checkbox', 'ex_range', 'ex_switch',
           'ex_textarea', 'ex_radio', 'ex_ukselect', 'ex_select', 'ex_form']

# %% ../API Reference.ipynb
from fasthtml.common import *

from fh_frankenui.core import *
from nbdev.showdoc import *
import inspect

from enum import EnumType
from collections.abc import Callable

# %% ../API Reference.ipynb
def enum_to_html_table(enum_class):
    headers = ["Option", "Value"]
    rows = [[name, value.value] for name, value in enum_class.__members__.items()]
    return Div(
        Hr(cls='uk-divider-icon my-4'),
        H3(enum_class.__name__,cls='my-4'),
        P(I(enum_class.__doc__)),
        TableFromLists(headers, rows, cls=(TableT.hover, 'uk-table-small')),)

# %% ../API Reference.ipynb
from uuid import uuid4
def render_content(c):
    if isinstance(c, str):        return render_md(c)
    elif isinstance(c, EnumType): return enum_to_html_table(c)
    elif isinstance(c, FT):       return c
    elif isinstance(c, tuple):    
        _id = 'f'+str(uuid4())
        return Card(
            Button(
                FullySpacedDiv(UkIcon('corner-down-right', 20, 20, 3),"See Source"), 
                uk_toggle=f"target: #{_id}", id=_id, cls=ButtonT.primary),
            Button(
                FullySpacedDiv(UkIcon('corner-down-right', 20, 20, 3),"See Output"), 
                uk_toggle=f"target: #{_id}", id=_id, cls=ButtonT.primary, hidden=True),
            Div(c[0], id=_id),
            Div(Pre(Code(c[1])), id=_id, hidden=True, cls="mockup-code"),
            cls='my-8')
    elif isinstance(c, Callable): 
        _html = show_doc(c, renderer=BasicHtmlRenderer)._repr_html_()
        return NotStr(apply_classes(_html, class_map_mods={"table":'uk-table uk-table-hover uk-table-small'}))
    else: return c    

# %% ../API Reference.ipynb
def create_doc_section(*content, title, md_content=None):
    return lambda: Section(H1(title,cls='mb-10'), *map(render_content, content))

# %% ../API Reference.ipynb
def string2code_string(code: str) -> tuple: return eval(code), code

def extract_function_body(func):
    source = inspect.getsource(func)
    body_start = source.index(':') + 1
    body = source[body_start:]
    lines = body.split('\n')
    # Remove empty lines at the start
    while lines and not lines[0].strip():
        lines.pop(0)
    # Remove first 4 spaces from each line
    body = '\n'.join(line[4:] if line.startswith('    ') else line for line in lines)
    return body.replace('return ', '', 1)

def fn2code_string(fn: Callable) -> tuple: return fn(), extract_function_body(fn)

# %% ../API Reference.ipynb
def ex_buttons(): 
    return Div(
        Button("Default",   cls=ButtonT.default),
        Button("Primary",   cls=ButtonT.primary),
        Button("Secondary", cls=ButtonT.secondary),
        Button("Danger",    cls=ButtonT.danger),
        Button("Text",      cls=ButtonT.text),
        Button("Link",      cls=ButtonT.link),
        Button("Ghost",     cls=ButtonT.ghost),
        )

# %% ../API Reference.ipynb
def ex_links(): 
    return Div(cls='space-x-4')(
        A('Default Link'),
        A('Muted Link', cls=AT.muted),
        A('Text Link',  cls=AT.text),
        A('Reset Link', cls=AT.reset))

# %% ../API Reference.ipynb
docs_button_link = create_doc_section(
    Button, 
    fn2code_string(ex_buttons),
    ButtonT, 
    A,
    AT,
    fn2code_string(ex_links),
    title="Buttons & Links")

# %% ../API Reference.ipynb
def ex_headings():
    return Div(
        H1("Level 1 Heading (H1)"), 
        H2("Level 2 Heading (H2)"), 
        H3("Level 3 Heading (H3)"), 
        H4("Level 4 Heading (H4)")
        )

# %% ../API Reference.ipynb
docs_heading = create_doc_section(
                       fn2code_string(ex_headings),
                        H1, H2, H3, H4, 
                        title="Headings")

# %% ../API Reference.ipynb
docs_headers = create_doc_section( 
                       "To get headers with a default theme use `hdrs=Theme.<color>.headers()`.  For example for the blue theme you would use `hdrs=Theme.blue.headers().  Theme options are:",
                        "> Note: Tailwind is included in the headers for convenience",
                        Theme,
                       title="Headers")

# %% ../API Reference.ipynb
def ex_textfont():
    return Div(
    P('muted_sm', cls=TextFont.muted_sm),
    P('muted_lg', cls=TextFont.muted_lg), 
    P('bold_sm', cls=TextFont.bold_sm),
    )

# %% ../API Reference.ipynb
def ex_textt():
    return Grid(
        P('lead',           cls=TextT.lead),
        P('meta',           cls=TextT.meta),
        P('italic',         cls=TextT.italic),
        P('small',          cls=TextT.small),
        P('default',        cls=TextT.default),
        P('large',          cls=TextT.large),
        P('light',          cls=TextT.light),
        P('normal',         cls=TextT.normal),
        P('bold',           cls=TextT.bold),
        P('lighter',        cls=TextT.lighter),
        P('bolder',         cls=TextT.bolder),
        P('capitalize',     cls=TextT.capitalize),
        P('uppercase',      cls=TextT.uppercase),
        P('lowercase',      cls=TextT.lowercase),
        P('decoration_none',cls=TextT.decoration_none),
        P('muted',          cls=TextT.muted),
        P('primary',        cls=TextT.primary),
        P('secondary',      cls=TextT.secondary),
        P('success',        cls=TextT.success),
        P('warning',        cls=TextT.warning),
        P('danger',         cls=TextT.danger),
        P('left',           cls=TextT.left),
        P('right',          cls=TextT.right),
        P('center',         cls=TextT.center),
        P('justify',        cls=TextT.justify),
        P('top',            cls=TextT.top),
        P('middle',         cls=TextT.middle),
        P('bottom',         cls=TextT.bottom),
        P('baseline',       cls=TextT.baseline),
        P('truncate',       cls=TextT.truncate),
        P('break_',         cls=TextT.break_),
        P('nowrap',         cls=TextT.nowrap),
        )

# %% ../API Reference.ipynb
docs_text = create_doc_section( 
   "Styling text is possibly the most common style thing to do, so we have a couple of helpers for discoverability inside python.  `TextFont` is intended to be combinations are are widely applicable and used often, where `TextT` is intended to be more flexible options for you to combine together yourself.",
    TextFont,
    fn2code_string(ex_textfont),
    TextT,
    fn2code_string(ex_textt),
    title="Text Style")

# %% ../API Reference.ipynb
def ex_articles():
    return Article(
        ArticleTitle("Sample Article Title"), 
        ArticleMeta("By: John Doe"),
        P('lorem ipsum dolor sit amet consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'))

# %% ../API Reference.ipynb
def ex_containers():
    return Container(
        "This is a sample container with custom styling.",
        cls=ContainerT.xsmall,
        style="background-color: #FFA500; color: #000000")

# %% ../API Reference.ipynb
docs_containers = create_doc_section(
    ArticleMeta,
    ArticleTitle,
    Article,
    fn2code_string(ex_articles),
    Container,
    ContainerT,
    fn2code_string(ex_containers),
    Section,
    SectionT,
    title="Articles, Containers & Sections"
)

# %% ../API Reference.ipynb
def ex_card():
    return Card(
        Form(LabelInput("Input"),
             LabelRange("Range")),
        header=Div(
            CardTitle("Header"),
            P("A card with header and footer",cls=TextFont.muted_sm)),
        footer=LAlignedDiv(Button("Footer Submit Button")))

# %% ../API Reference.ipynb
def Tags(cats): return Div(cls='space-x-2 flex flex-wrap')(map(lambda c: Label(c, cls='mb-1'), cats))

def ex_card2():
    return Card(
        LAlignedDiv(
            Div(A(Img(src="https://isaac-flath.github.io/website/posts/_TopicImages/FastHTML.jpg", style="width:100%; max-width:200px"), href="#"), cls='mb-4 md:mb-0 md:mr-4'),
            Div(cls='space-y-3 uk-width-expand')(
                H4("Creating Custom FastHTML Tags for Markdown Rendering", cls='text-lg md:text-xl'),
                P("A step by step tutorial to rendering markdown in FastHTML using zero-md inside of DaisyUI chat bubbles", cls='text-sm md:text-base'),
                FullySpacedDiv(map(lambda s: Span(s, cls='text-xs md:text-sm'), ["Isaac Flath", "20-October-2024"]), cls=TextFont.muted_sm),
                FullySpacedDiv(
                    Tags(["FastHTML", "HTMX", "Web Apps"]),
                    Button("Read", cls=(ButtonT.primary, 'h-6 text-xs md:text-sm')),
                    cls='flex-col md:flex-row items-start md:items-center'
                )
            ),
            cls='flex flex-col md:flex-row'
        )
    )

# %% ../API Reference.ipynb
docs_cards = create_doc_section(
    Card,
    H3("Example Usage"),
    fn2code_string(ex_card),
    fn2code_string(ex_card2),
    CardTitle,
    CardT,
    "The remainder of these are only needed if you're doing something really special.  They are used in the `Card` function to generate the boilerplate for you.",
    CardContainer,
    CardHeader,
    CardBody,
    CardFooter,
    title="Cards"
)

# %% ../API Reference.ipynb
def ex_lists():
    list_options = [(style,str(cls)) for style,cls in ListT.__members__.items()]
    lists = [Div(H4(f"{style} List:"), List(Li("Item 1"), Li("Item 2"), cls=cls)) for style, cls in list_options]
    return Grid(*lists)

# %% ../API Reference.ipynb
docs_lists = create_doc_section(
    List,
    fn2code_string(ex_lists),
    ListT,
    title="Lists")

# %% ../API Reference.ipynb
def ex_md(): 
    return render_md('''# Test MD

+ A list with **bold** and *italics*
+ And a link to [answer.ai](https://answer.ai)''')

def ex_applyclasses():
    return apply_classes('<h1>Hello, World!</h1><p>This is a paragraph</p>')
        
        
docs_markdown = create_doc_section(render_md, 
                             fn2code_string(ex_md), 
                             P("This uses the `apply_classes` function, which can be used to apply classes to html strings"),
                             apply_classes,
                             fn2code_string(ex_applyclasses),
                             title="Markdown")

# %% ../API Reference.ipynb
def ex_formlabel(): 
    return FormLabel("Form Label")

def ex_input(): 
    return Div(
        Input(placeholder="Enter text"), 
        LabelInput(label="Input", id='myid'))

def ex_checkbox(): 
    return Div(
        CheckboxX(), 
        LabelCheckboxX(label="Checkbox", id='checkbox1'))
def ex_range(): 
    return Div(
        Range(), 
        LabelRange(label="Range", id='range1'))
def ex_switch(): 
    return Div(
        Switch(id="switch"), 
        LabelSwitch(label="Switch", id='switch'))

def ex_textarea(): 
    return Div(
        TextArea(placeholder="Enter multiple lines of text"), 
        LabelTextArea(label="TextArea", id='myid'))

def ex_radio(): 
    return Div(
        Radio(name="radio-group", id="radio1"), 
        LabelRadio(label="Radio", id='radio1',cls='flex items-center space-x-4'))

def ex_ukselect(): 
    return Div(
        UkSelect(map(Option, ["Option 1", "Option 2", "Option 3"])),
        LabelUkSelect(map(Option, ["Option 1", "Option 2", "Option 3"]), label="UkSelect", id='myid'))

def ex_select(): 
    return Div(
        Select(map(Option, ["Option 1", "Option 2", "Option 3"])),
        LabelSelect(map(Option, ["Option 1", "Option 2", "Option 3"]), label="Select", id='myid'))

# %% ../API Reference.ipynb
def ex_form():
    relationship = ["Parent",'Sibling', "Friend", "Spouse", "Significant Other", "Relative", "Child", "Other"]
    return Div(cls='space-y-4')(
        CenteredDiv(
            H3("Emergency Contact Form"),
            P("Please fill out the form completely", cls=TextFont.muted_sm)),
        Form(cls='space-y-4')(
            Grid(LabelInput("First Name",id='fn'), LabelInput("Last Name",id='ln')),
            Grid(LabelInput("Email",     id='em'), LabelInput("Phone",    id='ph')),
            H3("Relationship to patient"),
            Grid(*[LabelCheckboxX(o) for o in relationship], cols=4, cls='space-y-3'),
            LabelInput("Address",        id='ad'),
            LabelInput("Address Line 2", id='ad2'),
            Grid(LabelInput("City",      id='ct'), LabelInput("State",    id='st')),
            LabelInput("Zip",            id='zp'),
            CenteredDiv(Button("Submit Form", cls=ButtonT.primary))))

# %% ../API Reference.ipynb
docs_forms = create_doc_section(
    H3("Example Form"),
    P(f"This form was live coded in a 5 minute video ",
          A("here",href="https://www.loom.com/share/0916e8a95d524c43a4d100ee85157624?start_and_pause=1", 
            cls=AT.muted), cls=TextFont.muted_sm),
    fn2code_string(ex_form),
    FormLabel,
    fn2code_string(ex_formlabel),
    Input,
    fn2code_string(ex_input),
    Radio,
    fn2code_string(ex_radio),
    CheckboxX,
    fn2code_string(ex_checkbox),
    Range,
    fn2code_string(ex_range),
    Switch,
    fn2code_string(ex_switch),
    TextArea,
    fn2code_string(ex_textarea),
    Select,
    fn2code_string(ex_select),
    UkSelect,
    fn2code_string(ex_ukselect),
    title="Forms")
