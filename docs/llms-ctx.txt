<project title="MonsterUI Documentation" summary="MonsterUI is a python library which brings styling to python for FastHTML apps.">Things to remembers when using MonsterUI:
- While Pico CSS is commonly used in FastHTML apps, that is *completely incompatible* with MonsterUI. 
- MonsterUI is *not* compatible with FastAPI syntax and is not targeted at creating API services.<api reference><doc title="Button | Link"># Buttons & Links

#

# Buttons & Links

See Source

See Output

DefaultPrimarySecondaryDangerTextLinkGhost

[code]

    def ex_buttons(): 
        return Grid(
            Button("Default"),
            Button("Primary",   cls=ButtonT.primary),
            Button("Secondary", cls=ButtonT.secondary),
            Button("Danger",    cls=ButtonT.danger),
            Button("Text",      cls=ButtonT.text),
            Button("Link",      cls=ButtonT.link),
            Button("Ghost",     cls=ButtonT.ghost),
            )
    
[/code]

See Source

See Output

Default LinkMuted LinkText LinkReset Link

[code]

    def ex_links(): 
        return Div(cls='space-x-4')(
            A('Default Link'),
            A('Muted Link', cls=AT.muted),
            A('Text Link',  cls=AT.text),
            A('Reset Link', cls=AT.reset))
    
[/code]

### Button

Source

[code]

    Button(*c: Union[str, fastcore.xml.FT], cls: Union[str, enum.Enum] = <ButtonT.default: 'uk-button-default'>, submit=True, **kwargs) -> fastcore.xml.FT
[/code]

> Button with Styling (defaults to `submit` for form submission)

**Params**

  * `c` Contents of `Button` tag (often text)

  * `cls` Classes in addition to `Button` styling (use `ButtonT` for built in styles)

  * `submit` Whether the button should submit a form

  * `kwargs` Additional args for `Button` tag

**Returns:** Button(..., cls='uk-button')

* * *

### ButtonT

_Options for styling Buttons_

Option | Value | Option | Value | Option | Value  
---|---|---|---|---|---  
default | uk-button-default | primary | uk-button-primary | secondary | uk-button-secondary  
danger | uk-button-danger | text | uk-button-text | link | uk-button-link  
ghost | uk-button-ghost |  |  |  |   
  
* * *

### AT

_Link styles from https://franken-ui.dev/docs/link_

Option | Value | Option | Value  
---|---|---|---  
muted | uk-link-muted | text | uk-link-text  
reset | uk-link-reset |  | 
</doc><doc title="Cards"># Cards

#

# Cards

### Example Usage

See Source

See Output

Header

A card with header and footer

Input

Range

Footer Submit Button

[code]

    def ex_card():
        return Card(
            Form(LabelInput("Input"),
                 LabelRange("Range")),
            header=Div(
                CardTitle("Header"),
                P("A card with header and footer",cls=TextFont.muted_sm)),
            footer=DivLAligned(Button("Footer Submit Button")))
    
[/code]

See Source

See Output

#### Creating Custom FastHTML Tags for Markdown Rendering

A step by step tutorial to rendering markdown in FastHTML using zero-md inside of DaisyUI chat bubbles

Isaac Flath20-October-2024

FastHTMLHTMXWeb Apps

Read

[code]

    def ex_card2_wide():
        def Tags(cats): return Div(cls='space-x-2')(map(Label, cats))
    
        return Card(
            DivLAligned(
                A(Img(src="https://picsum.photos/200/200?random=12", style="width:200px"),href="#"),
                Div(cls='space-y-3 uk-width-expand')(
                    H4("Creating Custom FastHTML Tags for Markdown Rendering"),
                    P("A step by step tutorial to rendering markdown in FastHTML using zero-md inside of DaisyUI chat bubbles"),
                    DivFullySpaced(map(Span, ["Isaac Flath", "20-October-2024"]), cls=TextFont.muted_sm),
                    DivFullySpaced(
                        Tags(["FastHTML", "HTMX", "Web Apps"]),
                        Button("Read", cls=(ButtonT.primary,'h-6'))))))
    
[/code]

See Source

See Output

#### Creating Custom FastHTML Tags for Markdown Rendering

A step by step tutorial to rendering markdown in FastHTML using zero-md inside of DaisyUI chat bubbles

Isaac Flath20-October-2024

FastHTMLHTMXWeb Apps

Read

[code]

    def ex_card2_tall():
        def Tags(cats): return Div(cls='space-x-2')(map(Label, cats))
    
        return Card(
            Div(
                A(Img(src="https://picsum.photos/200/200?random=14"),href="#"),
                Div(cls='space-y-3 uk-width-expand')(
                    H4("Creating Custom FastHTML Tags for Markdown Rendering"),
                    P("A step by step tutorial to rendering markdown in FastHTML using zero-md inside of DaisyUI chat bubbles"),
                    DivFullySpaced(map(Span, ["Isaac Flath", "20-October-2024"]), cls=TextFont.muted_sm),
                    DivFullySpaced(
                        Tags(["FastHTML", "HTMX", "Web Apps"]),
                        Button("Read", cls=(ButtonT.primary,'h-6'))))))
    
[/code]

See Source

See Output

### Sarah Chen

Engineering Lead

San Francisco

### James Wilson

Senior Developer

New York

### Maria Garcia

UX Designer

London

### Alex Kumar

Product Manager

Singapore

### Emma Brown

DevOps Engineer

Toronto

### Marcus Johnson

Frontend Developer

Berlin

[code]

    def ex_card3():
        def team_member(name, role, location="Remote"):
            return Card(
                DivLAligned(
                    DiceBearAvatar(name, h=24, w=24),
                    Div(H3(name), P(role))),
                footer=DivFullySpaced(
                    DivHStacked(UkIcon("map-pin", height=16), P(location)),
                    DivHStacked(*(UkIconLink(icon, height=16) for icon in ("mail", "linkedin", "github")))))
        team = [
            team_member("Sarah Chen", "Engineering Lead", "San Francisco"),
            team_member("James Wilson", "Senior Developer", "New York"),
            team_member("Maria Garcia", "UX Designer", "London"),
            team_member("Alex Kumar", "Product Manager", "Singapore"),
            team_member("Emma Brown", "DevOps Engineer", "Toronto"),
            team_member("Marcus Johnson", "Frontend Developer", "Berlin")
        ]
        return Grid(*team, cols_sm=1, cols_md=1, cols_lg=2, cols_xl=3)
    
[/code]

### API Reference

### Card

Source

[code]

    Card(*c, header=None, footer=None, body_cls='space-y-6', header_cls=(), footer_cls=(), cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a Card with a header, body, and footer

**Params**

  * `c` Components that go in the body (Main content of the card such as a form, and image, a signin form, etc.)

  * `header` A component that goes in the header (often a `ModalTitle` and description)

  * `footer` A component that goes in the footer (often a `ModalCloseButton`)

  * `body_cls` classes for the body

  * `header_cls` classes for the header

  * `footer_cls` classes for the footer

  * `cls` class for outermost component

  * `kwargs` additional arguments for the `CardContainer`

**Returns:** Card component

### CardTitle

Source

[code]

    CardTitle(*c, cls=(), **kwargs)
[/code]

> Creates a card title

**Params**

  * `c` Components (often a string)

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

* * *

### CardT

_Card styles from UIkit_

Option | Value | Option | Value  
---|---|---|---  
default | uk-card-default | primary | uk-card-primary  
secondary | uk-card-secondary | danger | uk-card-danger  
  
The remainder of these are only needed if you're doing something really special. They are used in the `Card` function to generate the boilerplate for you.

### CardContainer

Source

[code]

    CardContainer(*c, cls=<CardT.default: 'uk-card-default'>, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a card container

**Params**

  * `c` Components (typically `CardHeader`, `CardBody`, `CardFooter`)

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** Container for a card

### CardHeader

Source

[code]

    CardHeader(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a card header

**Params**

  * `c` Components that goes in the header (often a `ModalTitle` and description)

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** Container for the header of a card

### CardBody

Source

[code]

    CardBody(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a card body

**Params**

  * `c` Components that go in the body (Main content of the card such as a form, and image, a signin form, etc.)

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** Container for the body of a card

### CardFooter

Source

[code]

    CardFooter(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a card footer

**Params**

  * `c` Components that go in the footer (often a `ModalCloseButton`)

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** Container for the footer of a card
</doc><doc title="Containers"># Articles, Containers & Sections

#

# Articles, Containers & Sections

### ArticleMeta

Source

[code]

    ArticleMeta(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> A metadata component for use within an Article showing things like date, author etc

**Params**

  * `c` contents of ArticleMeta tag (often other tags)

  * `cls` Classes in addition to ArticleMeta styling

  * `kwargs` Additional args for ArticleMeta tag

**Returns:** P(..., cls='uk-article-meta')

### ArticleTitle

Source

[code]

    ArticleTitle(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> A title component for use within an Article

**Params**

  * `c` contents of ArticleTitle tag (often other tags)

  * `cls` Classes in addition to ArticleTitle styling

  * `kwargs` Additional args for ArticleTitle tag

**Returns:** H1(..., cls='uk-article-title')

### Article

Source

[code]

    Article(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> A styled article container for blog posts or similar content

**Params**

  * `c` contents of Article tag (often other tags)

  * `cls` Classes in addition to Article styling

  * `kwargs` Additional args for Article tag

**Returns:** Article(..., cls='uk-article')

See Source

See Output

# Sample Article Title

By: John Doe

lorem ipsum dolor sit amet consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.

[code]

    def ex_articles():
        return Article(
            ArticleTitle("Sample Article Title"), 
            ArticleMeta("By: John Doe"),
            P('lorem ipsum dolor sit amet consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'))
    
[/code]

### Container

Source

[code]

    Container(*c, cls=('mt-5', <ContainerT.xlarge: 'uk-container-xlarge'>), **kwargs) -> fastcore.xml.FT
[/code]

> Div to be used as a container that often wraps large sections or a page of content

**Params**

  * `c` Contents of Container tag (often other FT Components)

  * `cls` Classes in addition to Container styling

  * `kwargs` Additional args for Container (`Div` tag)

**Returns:** Container(..., cls='uk-container')

* * *

### ContainerT

_Max width container sizes from https://franken-ui.dev/docs/container_

Option | Value | Option | Value  
---|---|---|---  
xsmall | uk-container-xsmall | small | uk-container-small  
large | uk-container-large | xlarge | uk-container-xlarge  
expand | uk-container-expand |  |   
  
See Source

See Output

This is a sample container with custom styling.

[code]

    def ex_containers():
        return Container(
            "This is a sample container with custom styling.",
            cls=ContainerT.xsmall,
            style="background-color: #FFA500; color: #000000")
    
[/code]

### Section

Source

[code]

    Section(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Section with styling and margins

**Params**

  * `c` contents of Section tag (often other tags)

  * `cls` Classes in addition to Section styling

  * `kwargs` Additional args for Section tag

**Returns:** Div(..., cls='uk-section')

* * *

### SectionT

_Section styles from https://franken-ui.dev/docs/section_

Option | Value | Option | Value | Option | Value  
---|---|---|---|---|---  
default | uk-section-default | muted | uk-section-muted | primary | uk-section-primary  
secondary | uk-section-secondary | xsmall | uk-section-xsmall | small | uk-section-small  
large | uk-section-large | xlarge | uk-section-xlarge | remove_vertical | uk-section-remove-vertical
</doc><doc title="Dividers"># Dividers

#

# Dividers

### Divider

Source

[code]

    Divider(*c, cls=('my-4', <DividerT.icon: 'uk-divider-icon'>), **kwargs) -> fastcore.xml.FT
[/code]

> Divider with default styling and margin

**Params**

  * `c` contents of Divider tag (often nothing)

  * `cls` Classes in addition to Divider styling

  * `kwargs` Additional args for Divider tag

**Returns:** Hr(..., cls='uk-divider-icon') or Div(..., cls='uk-divider-vertical')

* * *

### DividerT

_Divider Styles from https://franken-ui.dev/docs/divider_

Option | Value | Option | Value  
---|---|---|---  
icon | uk-divider-icon | small | uk-divider-small  
vertical | uk-divider-vertical |  |   
  
See Source

See Output

Small Divider

* * *

Vertical Divider

Icon Divider

* * *
[code]

    def ex_dividers():
        return Div(
            P("Small Divider"),
            Divider(cls=DividerT.small),
            DivCentered(
                P("Vertical Divider"),
                Divider(cls=DividerT.vertical)),
            DivCentered("Icon Divider"),
            Divider(cls=DividerT.icon))
    
[/code]

### DividerSplit

Source

[code]

    DividerSplit(*c, cls=(), line_cls=(), text_cls=())
[/code]

> Creates a simple horizontal line divider with configurable thickness and vertical spacing

**Params**

  * `c`

  * `cls`

  * `line_cls`

  * `text_cls`

See Source

See Output

Or continue with

[code]

    def ex_dividersplit():
        return DividerSplit(P("Or continue with", cls=TextFont.muted_sm))
    
[/code]

### DividerLine

Source

[code]

    DividerLine(lwidth=2, y_space=4)
[/code]

> **Params**

  * `lwidth`

  * `y_space`

See Source

See Output

* * *
[code]

    def ex_dividerline(): 
        return DividerLine()
    
[/code]
</doc><doc title="Forms"> <!doctype html>
 <html>
   <head>
     <title>MonsterUI</title>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
<script src="https://unpkg.com/htmx.org@2.0.4/dist/htmx.min.js"></script><script src="https://cdn.jsdelivr.net/gh/answerdotai/fasthtml-js@1.0.12/fasthtml.js"></script><script src="https://cdn.jsdelivr.net/gh/answerdotai/surreal@main/surreal.js"></script><script src="https://cdn.jsdelivr.net/gh/gnat/css-scope-inline@main/script.js"></script>     <link rel="stylesheet" href="https://unpkg.com/franken-ui@1.1.0/dist/css/core.min.css">
<script type="module" src="https://unpkg.com/franken-ui@1.1.0/dist/js/core.iife.js"></script><script type="module" src="https://cdn.jsdelivr.net/gh/answerdotai/monsterui@main/monsterui/icon.iife.js"></script><script src="https://cdn.tailwindcss.com"></script><script>
        const htmlElement = document.documentElement;
        
            if (
                localStorage.getItem("mode") === "dark" ||
                (!("mode" in localStorage) &&
                window.matchMedia("(prefers-color-scheme: dark)").matches)
            ) {
                htmlElement.classList.add("dark");
            } else {
                htmlElement.classList.remove("dark");
            }
        
        htmlElement.classList.add(localStorage.getItem("theme") || "uk-theme-blue");
    </script>     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daisyui@4.12.22/dist/full.min.css">
     <style>
:root {
  --p: from hsl(var(--primary)) l c h;
  --pc: from hsl(var(--primary-foreground)) l c h;
  --s: from hsl(var(--secondary)) l c h;
  --sc: from hsl(var(--secondary-foreground)) l c h;
  --b2: from hsl(var(--card-background)) l c h;
  --b1: from hsl(var(--background)) l c h;
  --bc: from hsl(var(--foreground)) l c h;
  --b3: from hsl(var(--ring)) l c h;
  --er: from hsl(var(--destructive)) l c h;
  --erc: from hsl(var(--destructive-foreground)) l c h;
}
</style>
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/highlight.min.js"></script><script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/languages/python.min.js"></script>     <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/atom-one-light.css" id="hljs-light">
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/atom-one-dark.css" id="hljs-dark">
<script src="https://cdn.jsdelivr.net/gh/arronhunt/highlightjs-copy/dist/highlightjs-copy.min.js"></script>     <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/arronhunt/highlightjs-copy/dist/highlightjs-copy.min.css">
<script type="module">
                    hljs.addPlugin(new CopyButtonPlugin());
                    hljs.configure({
                        cssSelector: 'pre code',
                        languages: ['python'],
                        ignoreUnescapedHTML: true
                    });
                    function updateTheme() {
                        const isDark = document.documentElement.classList.contains('dark');
                        document.getElementById('hljs-dark').disabled = !isDark;
                        document.getElementById('hljs-light').disabled = isDark;
                    }
                    new MutationObserver(mutations =>
                        mutations.forEach(m => m.target.tagName === 'HTML' &&
                            m.attributeName === 'class' && updateTheme())
                    ).observe(document.documentElement, { attributes: true });
                    updateTheme();
                    htmx.onLoad(hljs.highlightAll);
                </script>     <link rel="icon" type="image/x-icon" href="/favicon.ico">
   </head>
   <body class=" bg-background text-foreground">
     <div class="flex flex-col md:flex-row w-full">
<button uk-toggle="target: #mobile-sidebar" type="submit" class="uk-button md:hidden mb-4"><uk-icon icon="menu" height="50" width="50" class="mt-4"></uk-icon></button>       <div hidden id="mobile-sidebar">
         <ul uk-nav class="uk-nav uk-nav-primary space-y-4 p-4 w-full md:w-full">
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Getting Started<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/getting_started" hx-push-url="true" hx-target="#content">Getting Started</a>               </li>
               <li>
<a href="#" hx-get="/tutorial_app" hx-push-url="true" hx-target="#content">Tutorial App</a>               </li>
             </ul>
           </li>
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
API Reference<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/api_ref/docs_button_link" hx-push-url="true" hx-target="#content">Button | Link</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_cards" hx-push-url="true" hx-target="#content">Cards</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_containers" hx-push-url="true" hx-target="#content">Containers</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_dividers" hx-push-url="true" hx-target="#content">Dividers</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_forms" hx-push-url="true" hx-target="#content">Forms</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_icons" hx-push-url="true" hx-target="#content">Icons</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_layout" hx-push-url="true" hx-target="#content">Layout</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_lists" hx-push-url="true" hx-target="#content">Lists</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_loading" hx-push-url="true" hx-target="#content">Loading</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_markdown" hx-push-url="true" hx-target="#content">Markdown</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_modals" hx-push-url="true" hx-target="#content">Modals</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_navigation" hx-push-url="true" hx-target="#content">Navigation</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_notifications" hx-push-url="true" hx-target="#content">Notifications</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_sliders" hx-push-url="true" hx-target="#content">Sliders</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_steps" hx-push-url="true" hx-target="#content">Steps</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_tables" hx-push-url="true" hx-target="#content">Tables</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_theme_headers" hx-push-url="true" hx-target="#content">Theme | Headers</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_typography" hx-push-url="true" hx-target="#content">Typography</a>               </li>
             </ul>
           </li>
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Guides<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/tutorial_spacing" hx-push-url="true" hx-target="#content">Spacing</a>               </li>
               <li>
<a href="#" hx-get="/tutorial_layout" hx-push-url="true" hx-target="#content">Layout</a>               </li>
             </ul>
           </li>
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Examples<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/tasks/" hx-push-url="true" hx-target="#content">Task</a>               </li>
               <li>
<a href="#" hx-get="/cards/" hx-push-url="true" hx-target="#content">Card</a>               </li>
               <li>
<a href="#" hx-get="/dashboard/" hx-push-url="true" hx-target="#content">Dashboard</a>               </li>
               <li>
<a href="#" hx-get="/forms/" hx-push-url="true" hx-target="#content">Form</a>               </li>
               <li>
<a href="#" hx-get="/music/" hx-push-url="true" hx-target="#content">Music</a>               </li>
               <li>
<a href="#" hx-get="/auth/" hx-push-url="true" hx-target="#content">Auth</a>               </li>
               <li>
<a href="#" hx-get="/playground/" hx-push-url="true" hx-target="#content">Playground</a>               </li>
               <li>
<a href="#" hx-get="/mail/" hx-push-url="true" hx-target="#content">Mail</a>               </li>
             </ul>
           </li>
           <li>
<a href="#" hx-get="/theme_switcher" hx-push-url="true" hx-target="#content">Theme</a>           </li>
         </ul>
       </div>
       <div class="md:flex w-full">
         <div class="hidden md:block w-1/5">
           <ul uk-nav class="uk-nav uk-nav-primary space-y-4 p-4 w-full md:w-full">
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Getting Started<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/getting_started" hx-push-url="true" hx-target="#content">Getting Started</a>                 </li>
                 <li>
<a href="#" hx-get="/tutorial_app" hx-push-url="true" hx-target="#content">Tutorial App</a>                 </li>
               </ul>
             </li>
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
API Reference<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/api_ref/docs_button_link" hx-push-url="true" hx-target="#content">Button | Link</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_cards" hx-push-url="true" hx-target="#content">Cards</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_containers" hx-push-url="true" hx-target="#content">Containers</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_dividers" hx-push-url="true" hx-target="#content">Dividers</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_forms" hx-push-url="true" hx-target="#content">Forms</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_icons" hx-push-url="true" hx-target="#content">Icons</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_layout" hx-push-url="true" hx-target="#content">Layout</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_lists" hx-push-url="true" hx-target="#content">Lists</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_loading" hx-push-url="true" hx-target="#content">Loading</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_markdown" hx-push-url="true" hx-target="#content">Markdown</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_modals" hx-push-url="true" hx-target="#content">Modals</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_navigation" hx-push-url="true" hx-target="#content">Navigation</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_notifications" hx-push-url="true" hx-target="#content">Notifications</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_sliders" hx-push-url="true" hx-target="#content">Sliders</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_steps" hx-push-url="true" hx-target="#content">Steps</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_tables" hx-push-url="true" hx-target="#content">Tables</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_theme_headers" hx-push-url="true" hx-target="#content">Theme | Headers</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_typography" hx-push-url="true" hx-target="#content">Typography</a>                 </li>
               </ul>
             </li>
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Guides<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/tutorial_spacing" hx-push-url="true" hx-target="#content">Spacing</a>                 </li>
                 <li>
<a href="#" hx-get="/tutorial_layout" hx-push-url="true" hx-target="#content">Layout</a>                 </li>
               </ul>
             </li>
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Examples<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/tasks/" hx-push-url="true" hx-target="#content">Task</a>                 </li>
                 <li>
<a href="#" hx-get="/cards/" hx-push-url="true" hx-target="#content">Card</a>                 </li>
                 <li>
<a href="#" hx-get="/dashboard/" hx-push-url="true" hx-target="#content">Dashboard</a>                 </li>
                 <li>
<a href="#" hx-get="/forms/" hx-push-url="true" hx-target="#content">Form</a>                 </li>
                 <li>
<a href="#" hx-get="/music/" hx-push-url="true" hx-target="#content">Music</a>                 </li>
                 <li>
<a href="#" hx-get="/auth/" hx-push-url="true" hx-target="#content">Auth</a>                 </li>
                 <li>
<a href="#" hx-get="/playground/" hx-push-url="true" hx-target="#content">Playground</a>                 </li>
                 <li>
<a href="#" hx-get="/mail/" hx-push-url="true" hx-target="#content">Mail</a>                 </li>
               </ul>
             </li>
             <li>
<a href="#" hx-get="/theme_switcher" hx-push-url="true" hx-target="#content">Theme</a>             </li>
           </ul>
         </div>
         <div id="content" class="md:w-4/5 w-full mr-5">
           <div class="uk-container mt-5 uk-container-xlarge">
             <div class="uk-card ">
               <div class="uk-card-body space-y-6">
                 <div class="uk-card-body ">
                   <h1 class="uk-h1 ">404 - Page Not Found</h1>
                   <p>The page you&#x27;re looking for doesn&#x27;t exist.</p>
                 </div>
               </div>
             </div>
           </div>
         </div>
       </div>
     </div>
   </body>
 </html></doc><doc title="Icons"># Icons

#

# Icons

# Avatars

See Source

See Output

[code]

    def ex_dicebear():
        return DivLAligned(
            DiceBearAvatar('Isaac Flath',10,10),
            DiceBearAvatar('Aaliyah',10,10),
            DiceBearAvatar('Alyssa',10,10))
    
[/code]

### DiceBearAvatar

Source

[code]

    DiceBearAvatar(seed_name: str, h: int = 20, w: int = 20)
[/code]

> Creates an Avatar using https://dicebear.com/

**Params**

  * `seed_name` Seed name (ie 'Isaac Flath')

  * `h` Height

  * `w` Width

# Icons

Icons use Lucide icons - you can find a full list of icons in their docs.

See Source

See Output

[code]

    def ex_icon():
        return Grid(
            UkIcon('chevrons-right', height=15, width=15),
            UkIcon('bug',            height=15, width=15),
            UkIcon('phone-call',     height=15, width=15),
            UkIcon('maximize-2',     height=15, width=15),
            UkIcon('thumbs-up',      height=15, width=15),)        
    
[/code]

### UkIcon

Source

[code]

    UkIcon(icon: str, height: int = None, width: int = None, stroke_width: int = None, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates an icon using lucide icons

**Params**

  * `icon` Icon name from lucide icons

  * `height`

  * `width`

  * `stroke_width` Thickness of lines

  * `cls` Additional classes on the `Uk_icon` tag

  * `kwargs` Additional args for `Uk_icon` tag

**Returns:** a lucide icon of the specified size

See Source

See Output

[code]

    def ex_iconlink():
        return DivLAligned(
            UkIconLink('chevrons-right'),
            UkIconLink('chevrons-right', button=True, cls=ButtonT.primary))
    
[/code]

### UkIconLink

Source

[code]

    UkIconLink(icon: str, height: int = None, width: int = None, stroke_width: int = None, cls=(), button: bool = False, **kwargs) -> fastcore.xml.FT
[/code]

> Creates an icon link using lucide icons

**Params**

  * `icon` Icon name from lucide icons

  * `height`

  * `width`

  * `stroke_width` Thickness of lines

  * `cls` Additional classes on the icon

  * `button` Whether to use a button (defaults to a link)

  * `kwargs` Additional args for `A` or `Button` tag

**Returns:** a lucide icon button or link of the specified size
</doc><doc title="Layout"> <!doctype html>
 <html>
   <head>
     <title>MonsterUI</title>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
<script src="https://unpkg.com/htmx.org@2.0.4/dist/htmx.min.js"></script><script src="https://cdn.jsdelivr.net/gh/answerdotai/fasthtml-js@1.0.12/fasthtml.js"></script><script src="https://cdn.jsdelivr.net/gh/answerdotai/surreal@main/surreal.js"></script><script src="https://cdn.jsdelivr.net/gh/gnat/css-scope-inline@main/script.js"></script>     <link rel="stylesheet" href="https://unpkg.com/franken-ui@1.1.0/dist/css/core.min.css">
<script type="module" src="https://unpkg.com/franken-ui@1.1.0/dist/js/core.iife.js"></script><script type="module" src="https://cdn.jsdelivr.net/gh/answerdotai/monsterui@main/monsterui/icon.iife.js"></script><script src="https://cdn.tailwindcss.com"></script><script>
        const htmlElement = document.documentElement;
        
            if (
                localStorage.getItem("mode") === "dark" ||
                (!("mode" in localStorage) &&
                window.matchMedia("(prefers-color-scheme: dark)").matches)
            ) {
                htmlElement.classList.add("dark");
            } else {
                htmlElement.classList.remove("dark");
            }
        
        htmlElement.classList.add(localStorage.getItem("theme") || "uk-theme-blue");
    </script>     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daisyui@4.12.22/dist/full.min.css">
     <style>
:root {
  --p: from hsl(var(--primary)) l c h;
  --pc: from hsl(var(--primary-foreground)) l c h;
  --s: from hsl(var(--secondary)) l c h;
  --sc: from hsl(var(--secondary-foreground)) l c h;
  --b2: from hsl(var(--card-background)) l c h;
  --b1: from hsl(var(--background)) l c h;
  --bc: from hsl(var(--foreground)) l c h;
  --b3: from hsl(var(--ring)) l c h;
  --er: from hsl(var(--destructive)) l c h;
  --erc: from hsl(var(--destructive-foreground)) l c h;
}
</style>
<script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/highlight.min.js"></script><script src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/languages/python.min.js"></script>     <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/atom-one-light.css" id="hljs-light">
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/atom-one-dark.css" id="hljs-dark">
<script src="https://cdn.jsdelivr.net/gh/arronhunt/highlightjs-copy/dist/highlightjs-copy.min.js"></script>     <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/arronhunt/highlightjs-copy/dist/highlightjs-copy.min.css">
<script type="module">
                    hljs.addPlugin(new CopyButtonPlugin());
                    hljs.configure({
                        cssSelector: 'pre code',
                        languages: ['python'],
                        ignoreUnescapedHTML: true
                    });
                    function updateTheme() {
                        const isDark = document.documentElement.classList.contains('dark');
                        document.getElementById('hljs-dark').disabled = !isDark;
                        document.getElementById('hljs-light').disabled = isDark;
                    }
                    new MutationObserver(mutations =>
                        mutations.forEach(m => m.target.tagName === 'HTML' &&
                            m.attributeName === 'class' && updateTheme())
                    ).observe(document.documentElement, { attributes: true });
                    updateTheme();
                    htmx.onLoad(hljs.highlightAll);
                </script>     <link rel="icon" type="image/x-icon" href="/favicon.ico">
   </head>
   <body class=" bg-background text-foreground">
     <div class="flex flex-col md:flex-row w-full">
<button uk-toggle="target: #mobile-sidebar" type="submit" class="uk-button md:hidden mb-4"><uk-icon icon="menu" height="50" width="50" class="mt-4"></uk-icon></button>       <div hidden id="mobile-sidebar">
         <ul uk-nav class="uk-nav uk-nav-primary space-y-4 p-4 w-full md:w-full">
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Getting Started<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/getting_started" hx-push-url="true" hx-target="#content">Getting Started</a>               </li>
               <li>
<a href="#" hx-get="/tutorial_app" hx-push-url="true" hx-target="#content">Tutorial App</a>               </li>
             </ul>
           </li>
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
API Reference<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/api_ref/docs_button_link" hx-push-url="true" hx-target="#content">Button | Link</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_cards" hx-push-url="true" hx-target="#content">Cards</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_containers" hx-push-url="true" hx-target="#content">Containers</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_dividers" hx-push-url="true" hx-target="#content">Dividers</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_forms" hx-push-url="true" hx-target="#content">Forms</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_icons" hx-push-url="true" hx-target="#content">Icons</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_layout" hx-push-url="true" hx-target="#content">Layout</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_lists" hx-push-url="true" hx-target="#content">Lists</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_loading" hx-push-url="true" hx-target="#content">Loading</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_markdown" hx-push-url="true" hx-target="#content">Markdown</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_modals" hx-push-url="true" hx-target="#content">Modals</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_navigation" hx-push-url="true" hx-target="#content">Navigation</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_notifications" hx-push-url="true" hx-target="#content">Notifications</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_sliders" hx-push-url="true" hx-target="#content">Sliders</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_steps" hx-push-url="true" hx-target="#content">Steps</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_tables" hx-push-url="true" hx-target="#content">Tables</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_theme_headers" hx-push-url="true" hx-target="#content">Theme | Headers</a>               </li>
               <li>
<a href="#" hx-get="/api_ref/docs_typography" hx-push-url="true" hx-target="#content">Typography</a>               </li>
             </ul>
           </li>
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Guides<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/tutorial_spacing" hx-push-url="true" hx-target="#content">Spacing</a>               </li>
               <li>
<a href="#" hx-get="/tutorial_layout" hx-push-url="true" hx-target="#content">Layout</a>               </li>
             </ul>
           </li>
           <li class="uk-parent ">
<a href="#">               <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Examples<span uk-navbar-parent-icon></span>               </div>
</a>             <ul class="uk-nav-sub uk-nav-primary">
               <li>
<a href="#" hx-get="/tasks/" hx-push-url="true" hx-target="#content">Task</a>               </li>
               <li>
<a href="#" hx-get="/cards/" hx-push-url="true" hx-target="#content">Card</a>               </li>
               <li>
<a href="#" hx-get="/dashboard/" hx-push-url="true" hx-target="#content">Dashboard</a>               </li>
               <li>
<a href="#" hx-get="/forms/" hx-push-url="true" hx-target="#content">Form</a>               </li>
               <li>
<a href="#" hx-get="/music/" hx-push-url="true" hx-target="#content">Music</a>               </li>
               <li>
<a href="#" hx-get="/auth/" hx-push-url="true" hx-target="#content">Auth</a>               </li>
               <li>
<a href="#" hx-get="/playground/" hx-push-url="true" hx-target="#content">Playground</a>               </li>
               <li>
<a href="#" hx-get="/mail/" hx-push-url="true" hx-target="#content">Mail</a>               </li>
             </ul>
           </li>
           <li>
<a href="#" hx-get="/theme_switcher" hx-push-url="true" hx-target="#content">Theme</a>           </li>
         </ul>
       </div>
       <div class="md:flex w-full">
         <div class="hidden md:block w-1/5">
           <ul uk-nav class="uk-nav uk-nav-primary space-y-4 p-4 w-full md:w-full">
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Getting Started<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/getting_started" hx-push-url="true" hx-target="#content">Getting Started</a>                 </li>
                 <li>
<a href="#" hx-get="/tutorial_app" hx-push-url="true" hx-target="#content">Tutorial App</a>                 </li>
               </ul>
             </li>
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
API Reference<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/api_ref/docs_button_link" hx-push-url="true" hx-target="#content">Button | Link</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_cards" hx-push-url="true" hx-target="#content">Cards</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_containers" hx-push-url="true" hx-target="#content">Containers</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_dividers" hx-push-url="true" hx-target="#content">Dividers</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_forms" hx-push-url="true" hx-target="#content">Forms</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_icons" hx-push-url="true" hx-target="#content">Icons</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_layout" hx-push-url="true" hx-target="#content">Layout</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_lists" hx-push-url="true" hx-target="#content">Lists</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_loading" hx-push-url="true" hx-target="#content">Loading</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_markdown" hx-push-url="true" hx-target="#content">Markdown</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_modals" hx-push-url="true" hx-target="#content">Modals</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_navigation" hx-push-url="true" hx-target="#content">Navigation</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_notifications" hx-push-url="true" hx-target="#content">Notifications</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_sliders" hx-push-url="true" hx-target="#content">Sliders</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_steps" hx-push-url="true" hx-target="#content">Steps</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_tables" hx-push-url="true" hx-target="#content">Tables</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_theme_headers" hx-push-url="true" hx-target="#content">Theme | Headers</a>                 </li>
                 <li>
<a href="#" hx-get="/api_ref/docs_typography" hx-push-url="true" hx-target="#content">Typography</a>                 </li>
               </ul>
             </li>
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Guides<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/tutorial_spacing" hx-push-url="true" hx-target="#content">Spacing</a>                 </li>
                 <li>
<a href="#" hx-get="/tutorial_layout" hx-push-url="true" hx-target="#content">Layout</a>                 </li>
               </ul>
             </li>
             <li class="uk-parent ">
<a href="#">                 <div class="uk-flex uk-flex-between uk-flex-middle uk-width-1-1">
Examples<span uk-navbar-parent-icon></span>                 </div>
</a>               <ul class="uk-nav-sub uk-nav-primary">
                 <li>
<a href="#" hx-get="/tasks/" hx-push-url="true" hx-target="#content">Task</a>                 </li>
                 <li>
<a href="#" hx-get="/cards/" hx-push-url="true" hx-target="#content">Card</a>                 </li>
                 <li>
<a href="#" hx-get="/dashboard/" hx-push-url="true" hx-target="#content">Dashboard</a>                 </li>
                 <li>
<a href="#" hx-get="/forms/" hx-push-url="true" hx-target="#content">Form</a>                 </li>
                 <li>
<a href="#" hx-get="/music/" hx-push-url="true" hx-target="#content">Music</a>                 </li>
                 <li>
<a href="#" hx-get="/auth/" hx-push-url="true" hx-target="#content">Auth</a>                 </li>
                 <li>
<a href="#" hx-get="/playground/" hx-push-url="true" hx-target="#content">Playground</a>                 </li>
                 <li>
<a href="#" hx-get="/mail/" hx-push-url="true" hx-target="#content">Mail</a>                 </li>
               </ul>
             </li>
             <li>
<a href="#" hx-get="/theme_switcher" hx-push-url="true" hx-target="#content">Theme</a>             </li>
           </ul>
         </div>
         <div id="content" class="md:w-4/5 w-full mr-5">
           <div class="uk-container mt-5 uk-container-xlarge">
             <div class="uk-card ">
               <div class="uk-card-body space-y-6">
                 <div class="uk-card-body ">
                   <h1 class="uk-h1 ">404 - Page Not Found</h1>
                   <p>The page you&#x27;re looking for doesn&#x27;t exist.</p>
                 </div>
               </div>
             </div>
           </div>
         </div>
       </div>
     </div>
   </body>
 </html></doc><doc title="Lists"># Lists

#

# Lists

### UkList

Source

[code]

    UkList(*li, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a list with styling

**Params**

  * `li` `Li` tags to put in the list

  * `cls` Additional classes on the list

  * `kwargs` Additional args for `Ul` tag

**Returns:** Ul(..., cls='uk-list')

See Source

See Output

#### disc List:

  * Item 1
  * Item 2

#### circle List:

  * Item 1
  * Item 2

#### square List:

  * Item 1
  * Item 2

#### decimal List:

  * Item 1
  * Item 2

#### hyphen List:

  * Item 1
  * Item 2

#### muted List:

  * Item 1
  * Item 2

#### primary List:

  * Item 1
  * Item 2

#### secondary List:

  * Item 1
  * Item 2

#### bullet List:

  * Item 1
  * Item 2

#### divider List:

  * Item 1
  * Item 2

#### striped List:

  * Item 1
  * Item 2

[code]

    def ex_lists():
        list_options = [(style,str(cls)) for style,cls in ListT.__members__.items()]
        lists = [Div(H4(f"{style} List:"), UkList(Li("Item 1"), Li("Item 2"), cls=cls)) for style, cls in list_options]
        return Grid(*lists)
    
[/code]

* * *

### ListT

_List styles from https://franken-ui.dev/docs/list_

Option | Value | Option | Value | Option | Value  
---|---|---|---|---|---  
disc | uk-list-disc | circle | uk-list-circle | square | uk-list-square  
decimal | uk-list-decimal | hyphen | uk-list-hyphen | muted | uk-list-muted  
primary | uk-list-primary | secondary | uk-list-secondary | bullet | uk-list-bullet  
divider | uk-list-divider | striped | uk-list-striped |  | 
</doc><doc title="Loading"># Loading

#

# Loading

See Source

See Output

[code]

    def ex_loading1():
        return Loading()
    
[/code]

See Source

See Output

[code]

    def ex_loading2():
        types = [LoadingT.spinner, LoadingT.dots, LoadingT.ring, LoadingT.ball, LoadingT.bars, LoadingT.infinity]
        sizes = [LoadingT.xs, LoadingT.sm, LoadingT.md, LoadingT.lg]
        rows = [Div(*[Loading((t,s)) for s in sizes], cls='flex gap-4') for t in types]
        return Div(*rows, cls='flex flex-col gap-4')
    
[/code]

### Loading

Source

[code]

    Loading(cls=(<LoadingT.bars: 'loading-bars'>, <LoadingT.lg: 'loading-lg'>), htmx_indicator=False, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a loading animation component

**Params**

  * `cls` Classes for indicator (generally `LoadingT` options)

  * `htmx_indicator` Add htmx-indicator class

  * `kwargs` additional args for outer conainter (`Span`)

**Returns:** Span(cls=...)

* * *

### LoadingT

__

Option | Value | Option | Value | Option | Value  
---|---|---|---|---|---  
spinner | loading-spinner | dots | loading-dots | ring | loading-ring  
ball | loading-ball | bars | loading-bars | infinity | loading-infinity  
xs | loading-xs | sm | loading-sm | md | loading-md  
lg | loading-lg |  |  |  | 
</doc><doc title="Markdown"># Markdown + HTML Frankification

#

# Markdown + HTML Frankification

See Source

See Output

# Example Markdown

  * With **bold** and _italics_
  * With a link

### And a subheading

> This is a blockquote
[code]

    def ex_markdown():
        md = '''# Example Markdown
    
    + With **bold** and *italics*
    + With a [link](https://github.com)
    
    ### And a subheading
    
    > This is a blockquote
    '''
        return render_md(md)
    
[/code]

This uses the `apply_classes` function, which can be used to apply classes to html strings

### apply_classes

Source

[code]

    apply_classes(html_str: str, class_map=None, class_map_mods=None) -> str
[/code]

> Apply classes to html string

**Params**

  * `html_str` Html string

  * `class_map` Class map

  * `class_map_mods` Class map that will modify the class map map (useful for small changes to a base class map)

**Returns:** Html string with classes applied

See Source

See Output

<div><h1 class="uk-h1 text-4xl font-bold mt-12 mb-6">Hello, World!</h1><p class="text-lg leading-relaxed mb-6">This is a paragraph</p></div>

[code]

    def ex_applyclasses():
        return apply_classes('<h1>Hello, World!</h1><p>This is a paragraph</p>')
    
[/code]
</doc><doc title="Modals"># Modals

#

# Modals

### Example Modal

See Source

See Output

Open Modal

## Simple Test Modal

With some somewhat brief content to show that it works!

Close

[code]

    def ex_modal():
        return Div(
            Button("Open Modal",uk_toggle="target: #my-modal" ),
            Modal(ModalTitle("Simple Test Modal"), 
                  P("With some somewhat brief content to show that it works!", cls=TextFont.muted_sm),
                  footer=ModalCloseButton("Close", cls=ButtonT.primary),id='my-modal'))
    
[/code]

### Modal

Source

[code]

    Modal(*c, header=None, footer=None, cls=(), dialog_cls=(), header_cls='p-6', body_cls='space-y-6', footer_cls=(), id='', open=False, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a modal with the appropriate classes to put the boilerplate in the appropriate places for you

**Params**

  * `c` Components to put in the `ModalBody` (often forms, sign in buttons, images, etc.)

  * `header` Components that go in the `ModalHeader` (often a `ModalTitle`)

  * `footer` Components that go in the `ModalFooter` (often a `ModalCloseButton`)

  * `cls` Additional classes on the outermost `ModalContainer`

  * `dialog_cls` Additional classes on the `ModalDialog`

  * `header_cls` Additional classes on the `ModalHeader`

  * `body_cls` Additional classes on the `ModalBody`

  * `footer_cls` Additional classes on the `ModalFooter`

  * `id` id for the outermost container

  * `open` Whether the modal is open (typically used for HTMX controlled modals)

  * `kwargs` Additional args for the outermost `Div` tag

**Returns:** Fully styled modal FT Component

### ModalCloseButton

Source

[code]

    ModalCloseButton(*c, cls=(), htmx=False, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a button that closes a modal with js

**Params**

  * `c` Components to put in the button (often text and/or an icon)

  * `cls` Additional classes on the button

  * `htmx` Whether to use HTMX to close the modal (must add hx_get to a route that closes the modal)

  * `kwargs` Additional args for `Button` tag

**Returns:** Button(..., cls='uk-modal-close') + `hx_target` and `hx_swap` if htmx is True

The remainder of the Modal functions below are used internally by the `Modal` function for you. You shouldn't need to use them unless you're doing something really special.

### ModalTitle

Source

[code]

    ModalTitle(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a modal title

**Params**

  * `c` Components to put in the `ModalTitle` (often text)

  * `cls` Additional classes on the `ModalTitle`

  * `kwargs` Additional args for `H2` tag

**Returns:** H2(..., cls='uk-modal-title')

### ModalFooter

Source

[code]

    ModalFooter(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a modal footer

**Params**

  * `c` Components to put in the `ModalFooter` (often buttons)

  * `cls` Additional classes on the `ModalFooter`

  * `kwargs` Additional args for `Div` tag

**Returns:** Div(..., cls='uk-modal-footer')

### ModalBody

Source

[code]

    ModalBody(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a modal body

**Params**

  * `c` Components to put in the `ModalBody` (often forms, sign in buttons, images, etc.)

  * `cls` Additional classes on the `ModalBody`

  * `kwargs` Additional args for `Div` tag

**Returns:** Div(..., cls='uk-modal-body')

### ModalHeader

Source

[code]

    ModalHeader(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a modal header

**Params**

  * `c` Components to put in the `ModalHeader`

  * `cls` Additional classes on the `ModalHeader`

  * `kwargs` Additional args for `Div` tag

**Returns:** Div(..., cls='uk-modal-header')

### ModalDialog

Source

[code]

    ModalDialog(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a modal dialog

**Params**

  * `c` Components to put in the `ModalDialog` (often `ModalBody`, `ModalHeader`, etc)

  * `cls` Additional classes on the `ModalDialog`

  * `kwargs` Additional args for `Div` tag

**Returns:** Div(..., cls='uk-modal-dialog')

### ModalContainer

Source

[code]

    ModalContainer(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a modal container that components go in

**Params**

  * `c` Components to put in the modal (often `ModalDialog`)

  * `cls` Additional classes on the `ModalContainer`

  * `kwargs` Additional args for `Div` tag

**Returns:** Div(..., cls='uk-modal uk-modal-container')
</doc><doc title="Navigation"># Navigation

#

# Navigation

# Nav, NavBar, DowDownNav, and Tab examples

* * *

## Nav

See Source

See Output

  * Option 1
  * Option 2
  * Option 3

[code]

    def ex_nav1():
        mbrs1 = [Li(A('Option 1'), cls='uk-active'), Li(A('Option 2')), Li(A('Option 3'))]
        return NavContainer(*mbrs1)
    
[/code]

See Source

See Output

  * NavHeaderLi
  * Option 1
  * Option 2
  * Option 3
  * Subtitle Ex 

NavSubtitle text to be shown

  *   * Parent Name
    * Child 1
    * Child 2
    * Child 3

[code]

    def ex_nav2():
        mbrs1 = [Li(A('Option 1'), cls='uk-active'), Li(A('Option 2')), Li(A('Option 3'))]
        mbrs2 = [Li(A('Child 1')), Li(A('Child 2')),Li(A('Child 3'))]
    
        return NavContainer(
            NavHeaderLi("NavHeaderLi"),
            *mbrs1,
            Li(A(href='')(Div("Subtitle Ex",NavSubtitle("NavSubtitle text to be shown")))),
            NavDividerLi(),
            NavParentLi(
                A('Parent Name'),
                NavContainer(*mbrs2,parent=False),
                 ),
        )
    
[/code]

## Navbars

Fully responsive simple navbar using the high level API and dicts to let MonsterUI do it all for you. This will collapse to a hamburger menu on mobile devices

See Source

See Output

# My Blog

* Page1
* Page2
* Page3
[code]

    def ex_navbar1():
        return NavBar(title='My Blog', 
                      nav_links={'Page1':'/rt1','Page2':'/rt2','Page3':'/rt3'}, 
                      active='Page2')
    
[/code]

Pass your own components to the high level navbar API for more flexibility. This will collapse to a hamburger menu on mobile devices

See Source

See Output

#

* * * Page1
* Page2
[code]

    def ex_navbar2():
        nav_content = (Li(A(Input(placeholder='search'))), 
                       Li(A(UkIcon("rocket"))), Li(A('Page1',href='/rt1')), 
                       Li(A("Page2", href='/rt3')))
        
        return NavBar(title=DivLAligned(Img(src='/api_reference/logo.svg'),UkIcon('rocket',height=30,width=30)), 
                      nav_links=nav_content)
    
[/code]

The final example shows a more complex navbar that lets you specify everything yourself. You are responsible for everything, including responsiveness

See Source

See Output

* Title 

Subtitle

* Parent

  * Active
  * Item
  * Item

* A Button

* DropDown

  * NavHeaderLi
  * Option 1
  * Option 2
  * Option 3
  * Subtitle Ex 

NavSubtitle text to be shown

  *   * Parent Name
    * Child 1
    * Child 2
    * Child 3

* 
[code]

    def ex_navbar3():
        mbrs1 = [Li(A('Option 1'), cls='uk-active'), Li(A('Option 2')), Li(A('Option 3'))]
        mbrs2 = [Li(A('Child 1')), Li(A('Child 2')),Li(A('Child 3'))]
    
        lnav = NavBarNav(
            Li(cls='uk-active')(A(NavBarSubtitle("Title","Subtitle"),href='')),
            Li(A("Parent",href=''),
              NavBarNavContainer(
                  Li(cls='uk-active')(A("Active",href='')),
                  Li(A("Item",href='')),
                  Li(A("Item",href='')))),
            Li(A(Button("A Button",cls=ButtonT.primary))))
    
        rnav = NavBarNav(
            Li(A("DropDown",NavBarParentIcon(),href=''),
                NavBarNavContainer(
                    NavHeaderLi("NavHeaderLi"),
                    *mbrs1,
                    Li(A(href='')(Div("Subtitle Ex",NavSubtitle("NavSubtitle text to be shown")))),
                    NavDividerLi(),
                    NavParentLi(
                        A('Parent Name'),
                        NavContainer(*mbrs2,parent=False)))),
            Li(A(Input(placeholder='search', cls='w-20'))))
        
        return NavBarContainer(
            NavBarLSide(lnav),
            NavBarCenter(Img(src='/api_reference/logo.svg')),
            NavBarRSide(rnav))
    
[/code]

## Drop Down Navs

See Source

See Output

Open DropDown

  * Item 1
  * Item 2

[code]

    def ex_navdrop():
        return Div(
            Button("Open DropDown"),
            DropDownNavContainer(Li(A("Item 1",href=''),Li(A("Item 2",href='')))))
    
[/code]

## Tabs

See Source

See Output

  * Active
  * Item
  * Item
  * Disabled

[code]

    def ex_tabs2():
        return Container(
            TabContainer(
                Li(A("Active",href='javascript:void(0);', cls='uk-active')),
                Li(A("Item",href='javascript:void(0);')),
                Li(A("Item",href='javascript:void(0);')),
                Li(A("Disabled", cls='uk-disabled'))))
    
[/code]

A tabs can use any method of navigation (htmx, or href). However, often these are use in conjunction with switchers do to this client side

See Source

See Output

  * Active
  * Item
  * Item
  * Disabled

  * # Tab 1

  * # Tab 2

  * # Tab 3

[code]

    def ex_tabs1():
        return Container(
            TabContainer(
                Li(A("Active",href='#', cls='uk-active')),
                Li(A("Item",href='#')),
                Li(A("Item",href='#')),
                Li(A("Disabled",href='#', cls='uk-disabled')),
                uk_switcher='connect: #component-nav; animation: uk-animation-fade',
                alt=True),
             Ul(id="component-nav", cls="uk-switcher")(
                Li(H1("Tab 1")),
                Li(H1("Tab 2")),
                Li(H1("Tab 3"))))
    
[/code]

# API Docs

### NavContainer

Source

[code]

    NavContainer(*li, cls=<NavT.primary: 'uk-nav-primary'>, parent=True, uk_nav=False, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a navigation container (useful for creating a sidebar navigation). A Nav is a list (NavBar is something different)

**Params**

  * `li` List items are navigation elements (Special `Li` such as `NavParentLi`, `NavDividerLi`, `NavHeaderLi`, `NavSubtitle`, `NavCloseLi` can also be used)

  * `cls` Additional classes on the nav

  * `parent` Whether this nav is a _parent_ or _sub_ nav

  * `uk_nav` True for default collapsible behavior, see frankenui docs for more advanced options

  * `kwargs` Additional args

**Returns:** FT Component that is a list of `Li` styled for a sidebar navigation menu

* * *

### NavT

__

Option | Value | Option | Value  
---|---|---|---  
default | uk-nav-default | primary | uk-nav-primary  
secondary | uk-nav-secondary |  |   
  
### NavCloseLi

Source

[code]

    NavCloseLi(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a navigation list item with a close button

**Params**

  * `c` Components

  * `cls` Additional classes on the li

  * `kwargs` Additional args for the li

**Returns:** Navigation list item with a close button

### NavSubtitle

Source

[code]

    NavSubtitle(*c, cls=<TextFont.muted_sm: 'uk-text-muted uk-text-small'>, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a navigation subtitle

**Params**

  * `c` Components

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** Navigation subtitle

### NavHeaderLi

Source

[code]

    NavHeaderLi(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a navigation list item with a header

**Params**

  * `c` Components

  * `cls` Additional classes on the li

  * `kwargs` Additional args for the li

**Returns:** Navigation list item with a header

### NavDividerLi

Source

[code]

    NavDividerLi(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a navigation list item with a divider

**Params**

  * `c` Components

  * `cls` Additional classes on the li

  * `kwargs` Additional args for the li

**Returns:** Navigation list item with a divider

### NavParentLi

Source

[code]

    NavParentLi(*nav_container, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a navigation list item with a parent nav for nesting

**Params**

  * `nav_container` `NavContainer` container for a nested nav with `parent=False`)

  * `cls` Additional classes on the li

  * `kwargs` Additional args for the li

**Returns:** Navigation list item

### NavBar

Source

[code]

    NavBar(nav_links: Union[dict, List[fastcore.xml.FT]] = {}, title: str | fastcore.xml.FT = 'Title', active: str = '') -> fastcore.xml.FT
[/code]

> **Params**

  * `nav_links` List of Li(A(...)) components or dict of {"name":"href value"}

  * `title` `H1(title)` if string else any FT component on left of navbar (Often a logo)

  * `active` if `nav_links` is a dict shows an indicator of which page you are on

**Returns:** Navigation bar

### NavBarCenter

Source

[code]

    NavBarCenter(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a NavBar center

**Params**

  * `c` Components

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** NavBar center

### NavBarRSide

Source

[code]

    NavBarRSide(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a NavBar right side

**Params**

  * `c` Components

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** NavBar right side

### NavBarLSide

Source

[code]

    NavBarLSide(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a NavBar left side

**Params**

  * `c` Components

  * `cls` Additional classes on the div

  * `kwargs` Additional args for the div

**Returns:** NavBar left side

### NavBarContainer

Source

[code]

    NavBarContainer(*navbarside, cls=(), container_cls=<ContainerT.expand: 'uk-container-expand'>, uk_navbar=True, **kwargs) -> fastcore.xml.FT
[/code]

> Create a NavBarContainer to put NavBar sides in

**Params**

  * `navbarside` Components (typically `NavBarLSide` or `NavBarRSide` or `NavBarCenter`)

  * `cls` Additional classes on the container

  * `container_cls` Additional classes on the container

  * `uk_navbar` Whether to use a navbar

  * `kwargs` Additional args for the container

**Returns:** NavBar container

### NavBarNav

Source

[code]

    NavBarNav(*li, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> A Nav that is part of a NavBar that could go in a `NavBarLSide`, `NavBarRSide`, or `NavBarCenter`

**Params**

  * `li` Components

  * `cls` Additional classes on the nav

  * `kwargs` Additional args for the nav

**Returns:** Nav that is part of a NavBar

### NavBarSubtitle

Source

[code]

    NavBarSubtitle(title, subtitle, cls=(), subtitle_cls=<TextFont.muted_sm: 'uk-text-muted uk-text-small'>, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a NavBar subtitle

**Params**

  * `title` Title

  * `subtitle` Subtitle

  * `cls` Additional classes on the div

  * `subtitle_cls` Additional classes on the subtitle

  * `kwargs` Additional args for the div

**Returns:** NavBar subtitle

### NavBarNavContainer

Source

[code]

    NavBarNavContainer(*li, cls=<NavT.primary: 'uk-nav-primary'>, parent=True, uk_nav=False, **kwargs) -> fastcore.xml.FT
[/code]

> Drop Down Nav

**Params**

  * `li` Components

  * `cls` Additional classes on the nav

  * `parent` Whether to use a parent nav

  * `uk_nav` True for default collapsible behavior, see https://franken-ui.dev/docs/nav#component-options for more advanced options

  * `kwargs` Additional args for the nav

**Returns:** NavBar nav container

### NavBarParentIcon

Source

[code]

    NavBarParentIcon()
[/code]

> **Params**

### DropDownNavContainer

Source

[code]

    DropDownNavContainer(*li, cls=<NavT.primary: 'uk-nav-primary'>, parent=True, uk_nav=False, uk_dropdown=True, **kwargs) -> fastcore.xml.FT
[/code]

> A Nav that is part of a DropDown

**Params**

  * `li` Components

  * `cls` Additional classes on the nav

  * `parent` Whether to use a parent nav

  * `uk_nav` True for default collapsible behavior, see https://franken-ui.dev/docs/nav#component-options for more advanced options

  * `uk_dropdown` Whether to use a dropdown

  * `kwargs` Additional args for the nav

**Returns:** DropDown nav container

### TabContainer

Source

[code]

    TabContainer(*li, cls='', alt=False, **kwargs) -> fastcore.xml.FT
[/code]

> A TabContainer where children will be different tabs

**Params**

  * `li` Components

  * `cls` Additional classes on the `Ul`

  * `alt` Whether to use an alternative tab style

  * `kwargs` Additional args for the `Ul`

**Returns:** Tab container
</doc><doc title="Notifications"># Alerts & Toasts

#

# Alerts & Toasts

### Alerts

The simplest alert is a div wrapped with a span:

See Source

See Output

This is a plain alert

[code]

    def ex_alerts1(): return Alert("This is a plain alert")
    
[/code]

Alert colors are defined by the alert styles:

See Source

See Output

Your purchase has been confirmed!

[code]

    def ex_alerts2():
        return Alert("Your purchase has been confirmed!",
                     cls=AlertT.success)
    
[/code]

It often looks nice to use icons in alerts:

See Source

See Output

Please enter a valid email.

[code]

    def ex_alerts3():
        return Alert(
            DivLAligned(UkIcon('triangle-alert'), 
                        P("Please enter a valid email.")),
            cls=AlertT.error)
    
[/code]

### Alert

Source

[code]

    Alert(*c, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> Alert informs users about important events.

**Params**

  * `c` Content for Alert (often text and/or icon)

  * `cls` Class for the alert (often an `AlertT` option)

  * `kwargs` Additional arguments for outer Div

**Returns:** Div(Span(...), cls='alert', role='alert')

* * *

### AlertT

_Alert styles from DaisyUI_

Option | Value | Option | Value  
---|---|---|---  
info | alert-info | success | alert-success  
warning | alert-warning | error | alert-error  
  
* * *

### Toasts

To define a toast with a particular location, add horizontal or vertical toast type classes:

See Source

See Output

First Example Toast

[code]

    def ex_toasts1():
        return Toast("First Example Toast", cls=(ToastHT.start, ToastVT.bottom))
    
[/code]

To define toast colors, set the class of the alert wrapped by the toast:

See Source

See Output

Second Example Toast

[code]

    def ex_toasts2():
        return Toast("Second Example Toast", alert_cls=AlertT.info)
    
[/code]

### Toast

Source

[code]

    Toast(*c, cls='', alert_cls='', **kwargs) -> fastcore.xml.FT
[/code]

> Toasts are stacked announcements, positioned on the corner of page.

**Params**

  * `c` Content for toast (often test)

  * `cls` Classes for toast (often `ToastHT` and `ToastVT` options)

  * `alert_cls` classes for altert (often `AlertT` options)

  * `kwargs` Additional args for outer container (`Div` tag)

**Returns:** Div(Alert(...), cls='toast')

* * *

### ToastHT

_Horizontal position for Toast_

Option | Value | Option | Value  
---|---|---|---  
start | toast-start | center | toast-center  
end | toast-end |  |   
  
* * *

### ToastVT

_Vertical position for Toast_

Option | Value | Option | Value  
---|---|---|---  
top | toast-top | middle | toast-middle  
bottom | toast-bottom |  | 
</doc><doc title="Sliders"># Sliders

#

# Sliders

Here is a simple example of a slider:

See Source

See Output

[code]

    def ex_sliders_1():
        return Slider(*[Img(src=f'https://picsum.photos/200/200?random={i}') for i in range(10)])
    
[/code]

Here is a slider with cards:

See Source

See Output

### Card 0

Card 0 content

### Card 1

Card 1 content

### Card 2

Card 2 content

### Card 3

Card 3 content

### Card 4

Card 4 content

### Card 5

Card 5 content

### Card 6

Card 6 content

### Card 7

Card 7 content

### Card 8

Card 8 content

### Card 9

Card 9 content

[code]

    def ex_sliders_2():
        def _card(i): return Card(H3(f'Card {i}'), P(f'Card {i} content'))
        return Slider(*[_card(i) for i in range(10)])
    
[/code]

Here is a slider with cards and autoplay:

See Source

See Output

### Card 0

Card 0 content

### Card 1

Card 1 content

### Card 2

Card 2 content

### Card 3

Card 3 content

### Card 4

Card 4 content

### Card 5

Card 5 content

### Card 6

Card 6 content

### Card 7

Card 7 content

### Card 8

Card 8 content

### Card 9

Card 9 content

[code]

    def ex_sliders_3():
        def _card(i): return Card(H3(f'Card {i}'), P(f'Card {i} content'))
        return Slider(*[_card(i) for i in range(10)], items_cls='gap-10', uk_slider='autoplay: true; autoplay-interval: 1000')
    
[/code]

Typically you want to use the `Slider` component, but if you need more control you can use the `SliderContainer`, `SliderItems`, and `SliderNav` components.

### Slider

Source

[code]

    Slider(*c, cls='', items_cls='gap-4', nav=True, nav_cls='', **kwargs) -> fastcore.xml.FT
[/code]

> Creates a slider with optional navigation arrows

**Params**

  * `c` Items to show in slider

  * `cls` Classes for slider container

  * `items_cls` Classes for items container

  * `nav` Whether to show navigation arrows

  * `nav_cls` Classes for navigation arrows

  * `kwargs` Additional args for slider container

**Returns:** SliderContainer(SliderItems(..., cls='gap-4'), SliderNav?)

### SliderContainer

Source

[code]

    SliderContainer(*c, cls='', uk_slider=True, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a slider container

**Params**

  * `c` Components

  * `cls` Additional classes on the container

  * `uk_slider` See FrankenUI Slider docs for more options

  * `kwargs` Additional args for the container

**Returns:** Div(..., cls='relative', uk_slider=True, ...)

### SliderItems

Source

[code]

    SliderItems(*c, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> Creates a slider items container

**Params**

  * `c` Components

  * `cls` Additional classes for the items

  * `kwargs` Additional args for the items

**Returns:** Div(..., cls='uk-slider-items uk-grid', ...)

### SliderNav

Source

[code]

    SliderNav(cls='uk-position-small uk-hidden-hover', prev_cls='absolute left-0 top-1/2 -translate-y-1/2', next_cls='absolute right-0 top-1/2 -translate-y-1/2', **kwargs) -> fastcore.xml.FT
[/code]

> Navigation arrows for Slider component

**Params**

  * `cls` Additional classes for the navigation

  * `prev_cls` Additional classes for the previous navigation

  * `next_cls` Additional classes for the next navigation

  * `kwargs` Additional args for the navigation

**Returns:** Left and right navigation arrows for Slider component
</doc><doc title="Steps"># Steps

#

# Steps

See Source

See Output

  * Account Created
  * Profile Setup
  * Verification

[code]

    def ex_steps2():
        return Steps(
            LiStep("Account Created", cls=StepT.primary),
            LiStep("Profile Setup", cls=StepT.neutral),
            LiStep("Verification", cls=StepT.neutral),
            cls="w-full")
    
[/code]

See Source

See Output

  * Project Planning
  * Design Phase
  * Development
  * Testing
  * Deployment

[code]

    def ex_steps3():
        return Steps(
        LiStep("Project Planning", cls=StepT.success, data_content="📝"),
        LiStep("Design Phase", cls=StepT.success, data_content="💡"),
        LiStep("Development", cls=StepT.primary, data_content="🛠️"),
        LiStep("Testing", cls=StepT.neutral, data_content="🔎"),
        LiStep("Deployment", cls=StepT.neutral, data_content="🚀"),
        cls=(StepsT.vertical, "min-h-[400px]"))
    
[/code]

# API Docs

### Steps

Source

[code]

    Steps(*li, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> Creates a steps container

**Params**

  * `li` Each `Li` represent a step (generally use `LiStep`)

  * `cls` class for Steps (generally a `StepsT` option)

  * `kwargs` Additional args for outer wrapper (`Ul` component)

**Returns:** Ul(..., cls='steps')

* * *

### StepsT

_Options for Steps_

Option | Value | Option | Value  
---|---|---|---  
vertical | steps-vertical | horizonal | steps-horizonal  
  
### LiStep

Source

[code]

    LiStep(*c, cls='', data_content=None, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a step list item

**Params**

  * `c` Description for Step that goes next to bubble (often text)

  * `cls` Additional step classes (generally a `StepT` component)

  * `data_content` Content for inside bubble (defaults to number, often an emoji)

  * `kwargs` Aditional arguments for the step (`Li` component)

**Returns:** Li(..., cls='step')

* * *

### StepT

_Step styles for LiStep_

Option | Value | Option | Value | Option | Value  
---|---|---|---|---|---  
primary | step-primary | secondary | step-secondary | accent | step-accent  
info | step-info | success | step-success | warning | step-warning  
error | step-error | neutral | step-neutral |  | 
</doc><doc title="Tables"># Tables

#

# Tables

See Source

See Output

Name | Age | City  
---|---|---  
Alice | 25 | New York  
Bob | 30 | San Francisco  
Charlie | 35 | London  
Total | 90
[code]

    def ex_tables0():
        return Table(
            Thead(Tr(Th('Name'),    Th('Age'), Th('City'))),
            Tbody(Tr(Td('Alice'),   Td('25'),  Td('New York')),
                  Tr(Td('Bob'),     Td('30'),  Td('San Francisco')),
                  Tr(Td('Charlie'), Td('35'),  Td('London'))),
            Tfoot(Tr(Td('Total'),   Td('90'))))
    
[/code]  
  
See Source

See Output

Name | Age | City  
---|---|---  
Alice | 25 | New York  
Bob | 30 | San Francisco  
Charlie | 35 | London  
Total | 90
[code]

    def ex_tables1():
        header =  ['Name',    'Age', 'City']
        body   = [['Alice',   '25',  'New York'],
                  ['Bob',     '30',  'San Francisco'],
                  ['Charlie', '35',  'London']]
        footer =  ['Total',   '90']
        return TableFromLists(header, body, footer)
    
[/code]  
  
See Source

See Output

NAME | AGE | CITY  
---|---|---  
Alice | 30 years | New York  
Bob | 25 years | London
[code]

    def ex_tables2():
        def body_render(k, v):
            match k.lower():
                case 'name': return Td(v, cls='font-bold')
                case 'age':  return Td(f"{v} years")
                case _:      return Td(v)
    
        header_data = ['Name',          'Age',     'City']
        body_data   =[{'Name': 'Alice', 'Age': 30, 'City': 'New York'},
                      {'Name': 'Bob',   'Age': 25, 'City': 'London'}]
    
        return TableFromDicts(header_data, body_data, 
            header_cell_render=lambda v: Th(v.upper()), 
            body_cell_render=body_render)
    
[/code]  
  
### Table

Source

[code]

    Table(*c, cls=(<TableT.middle: 'uk-table-middle'>, <TableT.divider: 'uk-table-divider'>, <TableT.hover: 'uk-table-hover'>, <TableT.small: 'uk-table-small'>), **kwargs) -> fastcore.xml.FT
[/code]

> Creates a table

**Params**

  * `c` Components (typically `Thead`, `Tbody`, `Tfoot`)

  * `cls` Additional classes on the table

  * `kwargs` Additional args for the table

**Returns:** Table component

### TableFromLists

Source

[code]

    TableFromLists(header_data: Sequence, body_data: Sequence[Sequence], footer_data=None, header_cell_render=<function Th at 0x7f3c20b1cfe0>, body_cell_render=<function Td at 0x7f3c20b1cf40>, footer_cell_render=<function Td at 0x7f3c20b1cf40>, cls=(<TableT.middle: 'uk-table-middle'>, <TableT.divider: 'uk-table-divider'>, <TableT.hover: 'uk-table-hover'>, <TableT.small: 'uk-table-small'>), sortable=False, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a Table from a list of header data and a list of lists of body data

**Params**

  * `header_data` List of header data

  * `body_data` List of lists of body data

  * `footer_data` List of footer data

  * `header_cell_render` Function(content) -> FT that renders header cells

  * `body_cell_render` Function(key, content) -> FT that renders body cells

  * `footer_cell_render` Function(key, content) -> FT that renders footer cells

  * `cls` Additional classes on the table

  * `sortable` Whether to use sortable table

  * `kwargs` Additional args for the table

**Returns:** Table from lists

### TableFromDicts

Source

[code]

    TableFromDicts(header_data: Sequence, body_data: Sequence[dict], footer_data=None, header_cell_render=<function Th at 0x7f3c20b1cfe0>, body_cell_render=<function <lambda> at 0x7f3c20b1d120>, footer_cell_render=<function <lambda> at 0x7f3c20b1d1c0>, cls=(<TableT.middle: 'uk-table-middle'>, <TableT.divider: 'uk-table-divider'>, <TableT.hover: 'uk-table-hover'>, <TableT.small: 'uk-table-small'>), sortable=False, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a Table from a list of header data and a list of dicts of body data

**Params**

  * `header_data` List of header data

  * `body_data` List of dicts of body data

  * `footer_data` List of footer data

  * `header_cell_render` Function(content) -> FT that renders header cells

  * `body_cell_render` Function(key, content) -> FT that renders body cells

  * `footer_cell_render` Function(key, content) -> FT that renders footer cells

  * `cls` Additional classes on the table

  * `sortable` Whether to use sortable table

  * `kwargs` Additional args for the table

**Returns:** Styled Table

* * *

### TableT

__

Option | Value | Option | Value | Option | Value  
---|---|---|---|---|---  
divider | uk-table-divider | striped | uk-table-striped | hover | uk-table-hover  
small | uk-table-small | large | uk-table-large | justify | uk-table-justify  
middle | uk-table-middle | responsive | uk-table-responsive |  |   
  
### Tbody

Source

[code]

    Tbody(*rows, cls=(), sortable=False, **kwargs)
[/code]

> **Params**

  * `rows`

  * `cls`

  * `sortable`

  * `kwargs`

### Th

Source

[code]

    Th(*c, cls=(), shrink=False, expand=False, small=False)
[/code]

> **Params**

  * `c` Components that go in the cell

  * `cls` Additional classes on the cell container

  * `shrink` Whether to shrink the cell

  * `expand` Whether to expand the cell

  * `small` Whether to use a small table

**Returns:** Table cell

### Td

Source

[code]

    Td(*c, cls=(), shrink=False, expand=False, small=False)
[/code]

> **Params**

  * `c` Components that go in the cell

  * `cls` Additional classes on the cell container

  * `shrink` Whether to shrink the cell

  * `expand` Whether to expand the cell

  * `small` Whether to use a small table

**Returns:** Table cell
</doc><doc title="Theme | Headers"># Headers

#

# Headers

To get headers with a default theme use `hdrs=Theme.<color>.headers()`. For example for the blue theme you would use `hdrs=Theme.blue.headers()`. The theme integrated together different frameworks and allows tailwind, FrankenUI, HighlighJS, and DaisyUI components to work well together.

Tailwind, FrankenUI and DaisyUI are imported by default. You must use DaisyUI headers to use anything in the `daisy` module, and FrankenUI headers to use anything in the `franken` module.

HighlightJS is not added by default, but you can add it by setting `highlightjs=True` in the headers function. The `render_md` function will use HighlightJS for code blocks.

Theme options are:

Theme.slate

Theme.stone

Theme.gray

Theme.neutral

Theme.red

Theme.rose

Theme.orange

Theme.green

Theme.blue

Theme.yellow

Theme.violet

Theme.zinc

### Theme Picker

See Source

See Output

[code]

    def ex_theme_switcher():
        from fasthtml.components import Uk_theme_switcher
        return Uk_theme_switcher()
    
[/code]

Themes are controlled with `bg-background text-foreground` classes on the `Body` tag. `fast_app` and `FastHTML` will do this for you automatically so you typically do not have to do anything

### fast_app

Source

[code]

    fast_app(*args, pico=False, db_file: Optional[str] = None, render: Optional[<built-in function callable>] = None, hdrs: Optional[tuple] = None, ftrs: Optional[tuple] = None, tbls: Optional[dict] = None, before: Union[tuple, NoneType, fasthtml.core.Beforeware] = None, middleware: Optional[tuple] = None, live: bool = False, debug: bool = False, routes: Optional[tuple] = None, exception_handlers: Optional[dict] = None, on_startup: Optional[<built-in function callable>] = None, on_shutdown: Optional[<built-in function callable>] = None, lifespan: Optional[<built-in function callable>] = None, default_hdrs=True, surreal: Optional[bool] = True, htmx: Optional[bool] = True, exts: Union[list, str, NoneType] = None, secret_key: Optional[str] = None, key_fname: str = '.sesskey', session_cookie: str = 'session_', max_age: int = 31536000, sess_path: str = '/', same_site: str = 'lax', sess_https_only: bool = False, sess_domain: Optional[str] = None, htmlkw: Optional[dict] = None, bodykw: Optional[dict] = None, reload_attempts: Optional[int] = 1, reload_interval: Optional[int] = 1000, static_path: str = '.', body_wrap: <built-in function callable> = <function noop_body at 0x7f3c761a44a0>, nb_hdrs: bool = False)
[/code]

> Create a FastHTML or FastHTMLWithLiveReload app with `bg-background text-foreground` to bodykw for frankenui themes

**Params**

  * `db_file` Database file name, if needed

  * `render` Function used to render default database class

  * `hdrs` Additional FT elements to add to 

  * `ftrs` Additional FT elements to add to end of 

  * `tbls` Experimental mapping from DB table names to dict table definitions

  * `before` Functions to call prior to calling handler

  * `middleware` Standard Starlette middleware

  * `live` Enable live reloading

  * `debug` Passed to Starlette, indicating if debug tracebacks should be returned on errors

  * `routes` Passed to Starlette

  * `exception_handlers` Passed to Starlette

  * `on_startup` Passed to Starlette

  * `on_shutdown` Passed to Starlette

  * `lifespan` Passed to Starlette

  * `default_hdrs` Include default FastHTML headers such as HTMX script?

  * `pico` Include PicoCSS header?

  * `surreal` Include surreal.js/scope headers?

  * `htmx` Include HTMX header?

  * `exts` HTMX extension names to include

  * `secret_key` Signing key for sessions

  * `key_fname` Session cookie signing key file name

  * `session_cookie` Session cookie name

  * `max_age` Session cookie expiry time

  * `sess_path` Session cookie path

  * `same_site` Session cookie same site policy

  * `sess_https_only` Session cookie HTTPS only?

  * `sess_domain` Session cookie domain

  * `htmlkw` Attrs to add to the HTML tag

  * `bodykw` Attrs to add to the Body tag

  * `reload_attempts` Number of reload attempts when live reloading

  * `reload_interval` Time between reload attempts in ms

  * `static_path` Where the static file route points to, defaults to root dir

  * `body_wrap` FT wrapper for body contents

  * `nb_hdrs` If in notebook include headers inject headers in notebook DOM?

  * `args`

### FastHTML

Source

[code]

    FastHTML(*args, pico=False, debug=False, routes=None, middleware=None, title: str = 'FastHTML page', exception_handlers=None, on_startup=None, on_shutdown=None, lifespan=None, hdrs=None, ftrs=None, exts=None, before=None, after=None, surreal=True, htmx=True, default_hdrs=True, sess_cls=<class 'starlette.middleware.sessions.SessionMiddleware'>, secret_key=None, session_cookie='session_', max_age=31536000, sess_path='/', same_site='lax', sess_https_only=False, sess_domain=None, key_fname='.sesskey', body_wrap=<function noop_body at 0x7f3c761a44a0>, htmlkw=None, nb_hdrs=False)
[/code]

> Create a FastHTML app and adds `bg-background text-foreground` to bodykw for frankenui themes

**Params**

  * `debug`

  * `routes`

  * `middleware`

  * `title`

  * `exception_handlers`

  * `on_startup`

  * `on_shutdown`

  * `lifespan`

  * `hdrs`

  * `ftrs`

  * `exts`

  * `before`

  * `after`

  * `surreal`

  * `htmx`

  * `default_hdrs`

  * `sess_cls`

  * `secret_key`

  * `session_cookie`

  * `max_age`

  * `sess_path`

  * `same_site`

  * `sess_https_only`

  * `sess_domain`

  * `key_fname`

  * `body_wrap`

  * `htmlkw`

  * `nb_hdrs`

  * `args`

  * `pico`
</doc><doc title="Typography"># Text Style

#

# Text Style

High Level Options

Ready to go typographic options that cover most of what you need

See Source

See Output

Titled

# Titled

# Level 1 Heading (H1)

## Level 2 Heading (H2)

### Level 3 Heading (H3)

#### Level 4 Heading (H4)

[code]

    def ex_headings():
        return Div(
            Titled("Titled"),
            H1("Level 1 Heading (H1)"), 
            H2("Level 2 Heading (H2)"), 
            H3("Level 3 Heading (H3)"), 
            H4("Level 4 Heading (H4)")
            )
    
[/code]

See Source

See Output

This is a plain P element

This is a PParagraph which adds space between paragraphs

This is a PLarge element

This is a PLead element

This is a PSmall element

This is a PMuted element

[code]

    def ex_ps():
        return Div(
            P("This is a plain P element"),
            PParagraph("This is a PParagraph which adds space between paragraphs"),
            PLarge("This is a PLarge element"),
            PLead("This is a PLead element"),
            PSmall("This is a PSmall element"),
            PMuted("This is a PMuted element"))
    
[/code]

See Source

See Output

`This is a CodeSpan element`

> This is a blockquote element
[code]

    #This is a CodeBlock element
    
    def add(a,b): return a+b
[/code]

[code]

    def ex_other():
        return Div(
            CodeSpan("This is a CodeSpan element"),
            Blockquote("This is a blockquote element"),
            CodeBlock("#This is a CodeBlock element\n\ndef add(a,b): return a+b"))
    
[/code]

Lower Level Options (enums)

Styling text is possibly the most common style thing to do, so we have a couple of helpers for discoverability inside python. `TextFont` is intended to be combinations are are widely applicable and used often, where `TextT` is intended to be more flexible options for you to combine together yourself.

See Source

See Output

muted_sm

muted_lg

bold_sm

[code]

    def ex_textfont():
        return Div(
        P('muted_sm', cls=TextFont.muted_sm),
        P('muted_lg', cls=TextFont.muted_lg), 
        P('bold_sm', cls=TextFont.bold_sm),
        )
    
[/code]

See Source

See Output

lead

meta

italic

small

default

large

light

normal

bold

lighter

bolder

capitalize

uppercase

lowercase

decoration_none

muted

primary

secondary

success

warning

danger

left

right

center

justify

top

middle

bottom

baseline

truncate

break_

nowrap

[code]

    def ex_textt():
        return Grid(
            P('lead',           cls=TextT.lead),
            P('meta',           cls=TextT.meta),
            P('italic',         cls=TextT.italic),
            P('small',          cls=TextT.small),
            P('default',        cls=TextT.default),
            P('large',          cls=TextT.large),
            P('light',          cls=TextT.light),
            P('normal',         cls=TextT.normal),
            P('bold',           cls=TextT.bold),
            P('lighter',        cls=TextT.lighter),
            P('bolder',         cls=TextT.bolder),
            P('capitalize',     cls=TextT.capitalize),
            P('uppercase',      cls=TextT.uppercase),
            P('lowercase',      cls=TextT.lowercase),
            P('decoration_none',cls=TextT.decoration_none),
            P('muted',          cls=TextT.muted),
            P('primary',        cls=TextT.primary),
            P('secondary',      cls=TextT.secondary),
            P('success',        cls=TextT.success),
            P('warning',        cls=TextT.warning),
            P('danger',         cls=TextT.danger),
            P('left',           cls=TextT.left),
            P('right',          cls=TextT.right),
            P('center',         cls=TextT.center),
            P('justify',        cls=TextT.justify),
            P('top',            cls=TextT.top),
            P('middle',         cls=TextT.middle),
            P('bottom',         cls=TextT.bottom),
            P('baseline',       cls=TextT.baseline),
            P('truncate',       cls=TextT.truncate),
            P('break_',         cls=TextT.break_),
            P('nowrap',         cls=TextT.nowrap),
            )
    
[/code]

* * *

### TextFont

_Combinations of TextT that are particularly useful_

Option | Value | Option | Value  
---|---|---|---  
muted_sm | uk-text-muted uk-text-small | muted_lg | uk-text-muted uk-text-large  
bold_sm | uk-text-bold uk-text-small |  |   
  
* * *

### TextT

_Text Styles from https://franken-ui.dev/docs/text_

Option | Value | Option | Value | Option | Value | Option | Value  
---|---|---|---|---|---|---|---  
lead | uk-text-lead | meta | uk-text-meta | italic | uk-text-italic | small | uk-text-small  
default | uk-text | large | uk-text-large | light | uk-text-light | normal | uk-text-normal  
bold | uk-text-bold | lighter | uk-text-lighter | bolder | uk-text-bolder | capitalize | uk-text-capitalize  
uppercase | uk-text-uppercase | lowercase | uk-text-lowercase | decoration_none | uk-text-decoration-none | muted | uk-text-muted  
primary | uk-text-primary | secondary | uk-text-secondary | success | uk-text-success | warning | uk-text-warning  
danger | uk-text-danger | left | uk-text-left | right | uk-text-right | center | uk-text-center  
justify | uk-text-justify | top | uk-text-top | middle | uk-text-middle | bottom | uk-text-bottom  
baseline | uk-text-baseline | truncate | uk-text-truncate | break_ | uk-text-break | nowrap | uk-text-nowrap  
  
### H1

Source

[code]

    H1(*c: fastcore.xml.FT | str, cls: enum.Enum | str | tuple = (), **kwargs) -> fastcore.xml.FT
[/code]

> H1 with styling and appropriate size

**Params**

  * `c` Contents of H1 tag (often text)

  * `cls` Classes in addition to H1 styling

  * `kwargs` Additional args for H1 tag

**Returns:** H1(..., cls='uk-h1')

### H2

Source

[code]

    H2(*c: fastcore.xml.FT | str, cls: enum.Enum | str | tuple = (), **kwargs) -> fastcore.xml.FT
[/code]

> H2 with styling and appropriate size

**Params**

  * `c` Contents of H2 tag (often text)

  * `cls` Classes in addition to H2 styling

  * `kwargs` Additional args for H2 tag

**Returns:** H2(..., cls='uk-h2')

### H3

Source

[code]

    H3(*c: fastcore.xml.FT | str, cls: enum.Enum | str | tuple = (), **kwargs) -> fastcore.xml.FT
[/code]

> H3 with styling and appropriate size

**Params**

  * `c` Contents of H3 tag (often text)

  * `cls` Classes in addition to H3 styling

  * `kwargs` Additional args for H3 tag

**Returns:** H3(..., cls='uk-h3')

### H4

Source

[code]

    H4(*c: fastcore.xml.FT | str, cls: enum.Enum | str | tuple = (), **kwargs) -> fastcore.xml.FT
[/code]

> H4 with styling and appropriate size

**Params**

  * `c` Contents of H4 tag (often text)

  * `cls` Classes in addition to H4 styling

  * `kwargs` Additional args for H4 tag

**Returns:** H4(..., cls='uk-h4')

### Titled

Source

[code]

    Titled(title: str = 'FastHTML app', *c, cls=<ContainerT.xlarge: 'uk-container-xlarge'>, **kwargs) -> fastcore.xml.FT
[/code]

> Creates a standard page structure for titled page. Main(Container(title, content))

**Params**

  * `title` Title of the page

  * `c` Contents of the page (often other tags)

  * `cls` Classes in addition to Container styling

  * `kwargs` Additional args for Container (`Div` tag)

**Returns:** Title, Main(Container(H1(title), content))

### PParagraph

Source

[code]

    PParagraph(*c, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> P Tag with paragraph style applied

**Params**

  * `c` Contents of P tag (often text)

  * `cls` Classes in addition to paragraph styling

  * `kwargs` Additional args for P tag

**Returns:** P(..., cls='uk-paragraph')

### PLarge

Source

[code]

    PLarge(*c, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> P Tag with large style applied

**Params**

  * `c` Contents of P tag (often text)

  * `cls` Classes in addition to paragraph styling

  * `kwargs` Additional args for P tag

**Returns:** P(..., cls='uk-text-large')

### PLead

Source

[code]

    PLead(*c, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> P Tag with lead style applied

**Params**

  * `c` Contents of P tag (often text)

  * `cls` Classes in addition to paragraph styling

  * `kwargs` Additional args for P tag

**Returns:** P(..., cls='uk-text-lead')

### PSmall

Source

[code]

    PSmall(*c, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> P Tag with small style applied

**Params**

  * `c` Contents of P tag (often text)

  * `cls` Classes in addition to paragraph styling

  * `kwargs` Additional args for P tag

**Returns:** P(..., cls='uk-text-small')

### PMuted

Source

[code]

    PMuted(*c, cls='', **kwargs) -> fastcore.xml.FT
[/code]

> P Tag with muted style applied

**Params**

  * `c` Contents of P tag (often text)

  * `cls` Classes in addition to paragraph styling

  * `kwargs` Additional args for P tag

**Returns:** P(..., cls='uk-text-muted')

### CodeSpan

Source

[code]

    CodeSpan(*c, cls=(), **kwargs) -> fastcore.xml.FT
[/code]

> A CodeSpan with Styling

**Params**

  * `c` Contents of CodeSpan tag (inline text code snippets)

  * `cls` Classes in addition to CodeSpan styling

  * `kwargs` Additional args for CodeSpan tag

**Returns:** Code(..., cls='uk-codespan')

### Blockquote

Source

[code]

    Blockquote(*c: fastcore.xml.FT | str, cls: enum.Enum | str | tuple = (), **kwargs) -> fastcore.xml.FT
[/code]

> Blockquote with Styling

**Params**

  * `c` Contents of Blockquote tag (often text)

  * `cls` Classes in addition to Blockquote styling

  * `kwargs` Additional args for Blockquote tag

**Returns:** Blockquote(..., cls='uk-blockquote')

### CodeBlock

Source

[code]

    CodeBlock(*c: str, cls: enum.Enum | str | tuple = (), code_cls: enum.Enum | str | tuple = (), **kwargs) -> fastcore.xml.FT
[/code]

> CodeBlock with Styling

**Params**

  * `c` Contents of Code tag (often text)

  * `cls` Classes for the outer container

  * `code_cls` Classes for the code tag

  * `kwargs` Additional args for Code tag

**Returns:** Div(Pre(Code(..., cls='uk-codeblock), cls='multiple tailwind styles'), cls='uk-block')
</doc></api reference></project>
